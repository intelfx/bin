#!/bin/bash

set -eo pipefail
shopt -s lastpipe

. lib.sh || exit

# pending resolution of https://github.com/systemd/systemd/issues/16699
systemctl_host() {
	local host="$1"
	shift
	local args=( "$@" )

	#log "=> systemctl -H $host ${args[*]} (emulating)"
	#ssh "$host" systemctl "${args[@]}"
	log "=> systemctl -H $host ${args[*]}"
	systemctl -H "$host" "${args[@]}"

}

ARGS=$(getopt -o 'c:a:u:q:' --long 'cpus:,affinity:,usage:,quota:' -n "${0##*/}" -- "$@")
eval set -- "$ARGS"
unset ARGS

unset ARG_CPU_QUOTA
unset ARG_CPU_AFFINITY
AFFINITY_UNITS=(
	anystation.nexus.i.intelfx.name:kthread.slice
	anystation.nexus.i.intelfx.name:system.slice
	anystation.nexus.i.intelfx.name:user.slice
	anystation.nexus.i.intelfx.name:systemd-nspawn@stratofortress.service
)
QUOTA_UNITS=(
	stratofortress.nexus.i.intelfx.name:system-cpu.slice
)

while :; do
	case "$1" in
	-u|--usage|-q|--quota)
		ARG_CPU_QUOTA="$2"
		shift 2
		continue
		;;

	-c|--cpus|-a|--affinity)
		ARG_CPU_AFFINITY="$2"
		shift 2
		continue
		;;
	'--')
		shift
		break
		;;
	*)
		die "Internal error"
		;;
	esac
done

if ! (( $# == 1 )); then
	die "Expected 1 positional argument, got $#: $*"
fi

case "$1" in
1|on|true)
	CPU_AFFINITY="8-15,24-31"
	CPU_QUOTA="100%"
	;;
0|off|false)
	CPU_AFFINITY="0-31"
	CPU_QUOTA="3000%"
	;;
esac

update_arg() {
	declare -n target="$1" arg="ARG_$1"
	if [[ ${arg+set} ]]; then
		target="$arg"
	fi
}
update_arg CPU_AFFINITY
update_arg CPU_QUOTA

if [[ $CPU_AFFINITY != keep ]]; then
	for unit in "${AFFINITY_UNITS[@]}"; do
		IFS=: read host unit <<< "$unit"
		systemctl_host "root@$host" set-property --runtime -- "$unit" AllowedCPUs="$CPU_AFFINITY"
	done
fi
if [[ $CPU_QUOTA != keep ]]; then
	for unit in "${QUOTA_UNITS[@]}"; do
		IFS=: read host unit <<< "$unit"
		systemctl_host "root@$host" set-property "$unit" CPUQuota="$CPU_QUOTA"
	done
fi
