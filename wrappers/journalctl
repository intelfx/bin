#!/bin/bash

set -eo pipefail
. lib.sh

pass_src="pass=ARGS_SOURCE"
pass_filter="pass=ARGS_FILTER"
pass_output="pass=ARGS_OUTPUT"
pass_cmds="pass=ARGS_CMDS"
declare -A JOURNALCTL_ARGS=(
	[--system|--user]="$pass_src"
	[-M|--machine:]="$pass_src"
	[-m|--merge]="$pass_src"
	[-D|--directory:]="$pass_src"
	[--file:]="$pass_src"
	[--root:]="$pass_src"
	[--image:]="$pass_src"
	[--image-policy:]="$pass_src"
	[--namespace:]="$pass_src"

	[-S|--since:]="ARG_SINCE" # no pass=
	[-U|--until:]="ARG_UNTIL" # no pass=
	[-c|--cursor:]="$pass_filter"
	[--after-cursor:]="$pass_filter"
	[--cursor-file:]="$pass_filter pass=ARGS_NONIDEMPOTENT"
	[-b|--boot::]="$pass_filter"
	[-u|--unit:]="ARG_UNIT $pass_filter"
	[--user-unit:]="ARG_USER_UNIT $pass_filter"
	[-t|--identifier:]="$pass_filter"
	[-p|--priority:]="$pass_filter"
	[--facility:]="$pass_filter"
	[-g|--grep:]="$pass_filter"
	[--case-sensitive::]="$pass_filter"
	[-k|--dmesg]="$pass_filter"

	[-o|--output:]="$pass_output"
	[--truncate-newline]="$pass_output"
	[--output-fields:]="$pass_output"
	[-n|--lines:]="$pass_output"
	[-r|--reverse]="$pass_output"
	[--show-cursor]="$pass_output"
	[--utc]="$pass_output"
	[-x|--catalog]="$pass_output"
	[--no-hostname]="$pass_output"
	[--no-full|--full|-l]="$pass_output"
	[-a|--all]="$pass_output"
	[-f|--follow]="$pass_output"
	[--no-tail]="$pass_output"
	[-q|--quiet]="$pass_output"
	[--no-pager]="$pass_output"
	[-e|--pager-end]="$pass_output"

	[--interval:]="$pass_cmds"
	[--verify-key:]="$pass_cmds"
	[--force]="$pass_cmds"

	[-N|--fields]="$pass_cmds"
	[-F:]="$pass_cmds"  # separately; see below
	[--field:]="$pass_cmds"
	[--list-boots]="$pass_cmds"
	[--disk-usage]="$pass_cmds"
	[--vacuum-size|--vacuum-time|--vacuum-files:]="$pass_cmds"
	[--verify]="$pass_cmds"
	[--sync]="$pass_cmds"
	[--reliquish-var]="$pass_cmds"
	[--smart-relinquish-var]="$pass_cmds"
	[--flush]="$pass_cmds"
	[--rotate]="$pass_cmds"
	[--header]="$pass_cmds"
	[--list-catalog:]="$pass_cmds"
	[--dump-catalog:]="$pass_cmds"
	[--update-catalog]="$pass_cmds"
	[--setup-keys]="$pass_cmds"
	[-h|--help]="$pass_cmds"
	[--version]="$pass_cmds"
	[--]="ARGS_MATCHES"


	[-L|--last]="ARG_LAST"
	[--follow-all]="ARG_FOLLOW_ALL"
)

if [[ -t 0 && -t 1 && -t 2 ]]; then
	# In interactive usage, I do not care about `journalctl -F` being `journalctl --field=`
	# XXX: this is a war crime
	unset JOURNALCTL_ARGS[-F:]
	JOURNALCTL_ARGS[-F]="ARG_FOLLOW_ALL"
fi
	
parse_args JOURNALCTL_ARGS "$@"

# transform --since/--until
function transform_date() {
	local value="$1"

	if [[ $value =~ ^(([A-Za-z]+ +)?[0-9]+-[0-9]+-[0-9]+ *)?( *[0-9]+:[0-9]+(:[0-9]+)?)( +[A-Za-z/]+)?$ ]] || \
	   [[ $value =~ ^(now|today|yesterday|tomorrow)( +[A-Za-z/]+)?$ ]] ||
	   [[ $value =~ ^[+-].+$ ]] ||
	   [[ $value =~ ^[0-9]+.+\ +ago$ ]] ||
	   [[ $value =~ ^@[0-9]+$ ]]
	then
		: # timestamp is in format directly accepted by journalctl
	else
		value="$(date -d "$value" '+%Y-%m-%d %H:%M:%S')"
	fi

	echo "$value"
}

if [[ ${ARG_SINCE+set} ]]; then
	ARGS_FILTER+=( --since "$(transform_date "$ARG_SINCE")" )
fi
if [[ ${ARG_UNTIL+set} ]]; then
	ARGS_FILTER+=( --until "$(transform_date "$ARG_UNTIL")" )
fi

# transform --follow-all
if [[ ${ARG_FOLLOW_ALL+set} ]]; then
	ARGS_OUTPUT+=( --follow --no-tail )
fi

# handle -L/--last
if [[ ${ARG_LAST+set} ]]; then
	if [[ ${ARG_UNIT+set} && ${#ARGS_FILTER[@]} == 2 && ! ${ARGS_MATCHES+set} ]]; then
		# the only filter is --unit
		if ! systemctl --system show -p InvocationID --value "$ARG_UNIT" | read invocation || \
		   ! [[ $invocation ]]; then
			die "Could not get invocation ID for unit '$ARG_UNIT'"
		fi
	elif [[ ${ARG_USER_UNIT+set} && ${#ARGS_FILTER[@]} == 2 && ! ${ARGS_MATCHES+set} ]]; then
		# the only filter is --user-unit
		if ! systemctl --user show -p InvocationID --value "$ARG_USER_UNIT" | read invocation || \
		   ! [[ $invocation ]]; then
		   	die "Could not get invocation ID for user unit '$ARG_USER_UNIT'"
		fi
	else
		if [[ ${ARGS_CMDS+set} ]]; then
			die "Unsupported: -L/--last with command flags (${ARGS_CMDS[*]})"
		fi
		if [[ ${ARGS_NONIDEMPOTENT+set} ]]; then
			die "Unsupported: -L/--last with non-idempotent filters (${ARGS_NONIDEMPOTENT[*]})"
		fi
		if in_array "+" "${ARGS_MATCHES[@]}"; then
			die "Unsupported: -L/--last with a '+' in matches (${ARGS_MATCHES[@]})"
		fi

		# handle it the naÃ¯ve way
		ignore_pipefail() { (( $1 == 141 )) || return $1; }
		{ /usr/bin/journalctl --quiet \
			"${ARGS_SOURCE[@]}" \
			"${ARGS_FILTER[@]}" \
			"${ARGS_MATCHES[@]}" \
			-o cat --output-fields _SYSTEMD_INVOCATION_ID --reverse --quiet 2>/dev/null \
			|| ignore_pipefail $?; } \
		| read invocation

		# this appends _SYSTEMD_INVOCATION_ID=... to whatever matches are there (AND),
		# then ORs it all with INVOCATION_ID=... (which is supposed to represent systemd's own messages about it)
		# and USER_INVOCATION_ID=... (same, but for systemd --user)
		ARGS_MATCHES+=(
			_SYSTEMD_INVOCATION_ID="$invocation" 
			+ _COMM=systemd INVOCATION_ID="$invocation" 
			+ _COMM=systemd USER_INVOCATION_ID="$invocation"
		)
	fi
fi

exec /usr/bin/journalctl \
	"${ARGS_SOURCE[@]}" \
	"${ARGS_FILTER[@]}" \
	"${ARGS_OUTPUT[@]}" \
	"${ARGS_CMDS[@]}" \
	"${ARGS_MATCHES[@]}"
