#!/bin/bash -e

die() {
	echo "$*" >&2
	exit 1
}

args=()
cc=(cc gcc clang)
cxx=(c++ g++ clang++)
compilers=()
want_ccache=
want_sccache=
cache=auto

if [[ $CC ]]; then
	cc=( "$CC" "${cc[@]}" )
	unset CC
fi
if [[ $CXX ]]; then
	cxx=( "$CXX" "${cxx[@]}" )
	unset CXX
fi

grab_compiler() {
	local arg
	for arg; do
		if [[ $arg == */* ]]; then
			echo "$arg"
			return 0
		elif command -v "$arg" 2>/dev/null; then
			return 0
		fi
	done
	return 1
}

grab_option() {
	local diag="$1" opt="$2" name value novalue

	if [[ $opt =~ ^([^=]+)=(.*)?$ ]]; then
		name="${BASH_REMATCH[1]}"
		value="${BASH_REMATCH[2]}"
	elif [[ $opt =~ ^([^=]+)$ ]]; then
		name="${BASH_REMATCH[1]}"
		novalue=1
	else
		die "Bad option: $diag"
	fi

	if [[ $name == cache ]]; then
		if [[ $novalue ]]; then value=1; fi
		case "$value" in
		1|yes|on|true|enabled) want_ccache=1; want_sccache=1 ;;
		''|0|no|off|false|disabled|none) want_ccache=0; want_sccache=0 ;;
		ccache|sccache) declare -n target_var="want_$value"; target_var=1 ;;
		*) die "Bad option: $diag" ;;
		esac
	elif [[ $name =~ ^(ccache|sccache)$ ]]; then
		if [[ $novalue ]]; then value=1; fi
		declare -n target_var="want_$name"
		case "$value" in
		1|yes|on|true|enabled) target_var=1 ;;
		0|no|off|false|disabled) target_var=0 ;;
		*) die "Bad option: $diag" ;;
		esac
	else
		die "Bad option: $diag"
	fi
}

grab_env() {
	local env="$1"

	if [[ $env =~ ^DISABLE_(CCACHE|SCCACHE)$ ]]; then
		declare -n env_var="$env"
		if [[ $env_var == 0 || $env_var == 1 ]]; then
			declare -n target_var="want_${BASH_REMATCH[1],,}"
			target_var="$(( !env_var ))"
		elif [[ ${env_var+set} ]]; then
			die "Bad environment variable: $env=${env_var@Q}"
		fi
	else
		die "Bad environment variable: $env"
	fi
}

# parse environment first
grab_env DISABLE_CCACHE
grab_env DISABLE_SCCACHE

# (fake) meson options override environment
while (( $# )); do
	if [[ $1 == -D && $2 =~ ^(cache|ccache|sccache) ]]; then
		grab_option "$1 $2" "$2"
		shift 2
	elif [[ $1 =~ ^-D(cache|ccache|sccache) ]]; then
		grab_option "$1" "${1#-D}"
		shift 1
	elif [[ $1 != -- ]]; then
		args+=( "$1" )
		shift 1
	else
		args+=( "$@" )
		shift $#
	fi
done

# make decision
if [[ $want_ccache == 0 && $want_sccache == 0 ]]; then
	cache=""
elif [[ $want_ccache == 1 && $want_sccache == 1 ]]; then
	cache="ccache"
elif [[ $want_ccache == 1 || $want_sccache == 0 ]]; then
	cache="ccache"
elif [[ $want_ccache == 0 || $want_sccache == 1 ]]; then
	cache="sccache"
elif [[ ! $want_ccache && ! $want_sccache ]]; then
	cache="auto"
else
	die "Internal error"
fi

# implement decision
if [[ $cache == auto ]]; then
	# disable meson's autodetection and find whatever is in $PATH
	compilers+=(
		CC="$(grab_compiler "${cc[@]}")"
		CXX="$(grab_compiler "${cxx[@]}")"
	)
else
	# find whatever is in $PATH sans caching wrappers, then prepend
	# whatever caching wrapper is set (or nothing)
	IFS=:
	path=( $PATH )
	newpath=()
	for p in "${path[@]}"; do
		if ! [[ $p/ == */ccache/* || $p/ == */sccache/* ]]; then
			newpath+=( "$p" )
		fi
	done
	PATH="${newpath[*]}"
	unset IFS path newpath

	if [[ $cache ]]; then
		# we want _some_ cache; use it
		compilers+=(
			CC="$cache $(grab_compiler "${cc[@]}")"
			CXX="$cache $(grab_compiler "${cxx[@]}")"
		)
	else
		# we do not want any cache
		compilers+=(
			CC="$(grab_compiler "${cc[@]}")"
			CXX="$(grab_compiler "${cxx[@]}")"
		)
	fi
fi

export "${compilers[@]}"
exec /usr/bin/meson "${args[@]}"
