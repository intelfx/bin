#!/bin/bash

. lib.sh || exit

BASE_DIR=~/tmp/big/flatpak-builder

: "${FLATPAK_BUILDER_REPO="$BASE_DIR/repo"}"
: "${FLATPAK_BUILDER_CACHE="$BASE_DIR/state"}"
: "${FLATPAK_BUILDER_APP="$BASE_DIR/app"}"
: "${FLATPAK_BUILDER_PREFETCH=1}"

eval "$(globaltraps)"

# do not create the repo dir as flatpak-builder will init a non-existent directory,
# but will not reinit an empty one
mkdir -p "$FLATPAK_BUILDER_CACHE" "$FLATPAK_BUILDER_APP"

if [[ -d "$FLATPAK_BUILDER_REPO" && ! -d "$FLATPAK_BUILDER_REPO/objects" ]]; then
	log "Repo directory $FLATPAK_BUILDER_REPO is uninitialized"
	FLATPAK_BUILDER_REPO_ORIG="$FLATPAK_BUILDER_REPO"
	FLATPAK_BUILDER_REPO="$(mktemp -p "$FLATPAK_BUILDER_REPO" "repo.XXXXXX" --dry-run)"
	ltrap "rm -rf '$FLATPAK_BUILDER_REPO'"
	log "Will build into $FLATPAK_BUILDER_REPO"
fi

FLATPAK_BUILDER_ARGS=()
if [[ ${FLATPAK_BUILDER_KEY+set} ]]; then
	FLATPAK_BUILDER_ARGS=(
		--gpg-sign="$FLATPAK_BUILDER_KEY"
	)
fi

APP_DIR="$(mktemp -d -p "$FLATPAK_BUILDER_APP")"
ltrap "rm -rf '$APP_DIR'"

# Search for manifest, crudely
manifest=
for arg; do
	if [[ ("$arg" == *.yml || "$arg" == *.yaml) && -f "$arg" ]] && grep -Eq '^app-id:' "$arg"; then
		manifest="$arg"
		break
	fi
done
if ! [[ $manifest ]]; then
	err "Could not find manifest -- disabling better update"
	unset FLATPAK_BUILDER_PREFETCH
fi

if [[ ${FLATPAK_BUILDER_PREFETCH+set} ]]; then
	libsh_export_log
	do_prefetch() {
		local src="$1" dest="$2" ref="$3"
		if [[ -d "$dest" ]]; then
			git -C "$dest" fetch --verbose origin "+$ref:$ref"
		else
			git clone --verbose "$src" "$dest" --mirror --branch "$ref"
		fi
	}
	export -f do_prefetch

	JQ_PROG='
	.modules[]
	| select(type == "object")
	| .sources[]
	| select(.type == "git")
	# FIXME
	| select(.branch)
	| {
		src: (.path // .url),
		ref: (.branch),
		name: ((.path // .url) | gsub("[^0-9a-zA-Z.-]+"; "_"))
	}
	| "\(.src)\t\(.name)\t\(.ref)"
	'

	repos=()
	count=0
	yq -r "$JQ_PROG" "$manifest" | while IFS=$'\t' read src name ref; do
		dest="$FLATPAK_BUILDER_CACHE/git/$name"
		repos+=( "$src" "$dest" "$ref" )
		(( ++count ))
	done
	log "Prefetching $count repositories concurrently"
	printf "%s\n" "${repos[@]}" | parallel -N3 'do_prefetch'

	log "Prefetch done -- disabling updates via flatpak-builder"
	FLATPAK_BUILDER_ARGS+=( --disable-updates )
fi
	
/usr/bin/flatpak-builder \
	--install-deps-from=flathub \
	"${FLATPAK_BUILDER_ARGS[@]}" \
	--ccache \
	--state-dir "$FLATPAK_BUILDER_CACHE" \
	--repo "$FLATPAK_BUILDER_REPO" \
	"$APP_DIR" \
	"$@"

if [[ ${FLATPAK_BUILDER_REPO_ORIG+set} ]]; then
	log "Moving $FLATPAK_BUILDER_REPO -> $FLATPAK_BUILDER_REPO_ORIG"
	find "$FLATPAK_BUILDER_REPO" -mindepth 1 -maxdepth 1 -execdir mv -vn -t "$FLATPAK_BUILDER_REPO_ORIG" {} \+
	rm -vd "$FLATPAK_BUILDER_REPO"
	log "Done moving"
fi
