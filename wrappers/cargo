#!/bin/bash

set -eo pipefail
shopt -s lastpipe

#
# constants
#

CARGO=(
	/usr/bin/cargo
)


#
# state
#

CARGO_CONFIG=

try_config() {
	local arg="$1"
	if [[ $CARGO_CONFIG ]]; then
		return
	elif [[ -e "$arg" ]]; then
		CARGO_CONFIG="$arg"
		return
	fi
	return 1
}

try_configs() {
	local arg
	for arg; do
		if try_config "$HOME/.cargo/config-$arg.toml"; then
			return
		fi
	done
}

call_cargo() {
	local -a args=( "$@" )
	local -a cmd

	cmd+=( "${CARGO[@]}" )
	if [[ $CARGO_CONFIG ]]; then
		cmd+=( --config "$CARGO_CONFIG" )
	fi
	cmd+=( "${args[@]}" )

	set -x
	exec "${cmd[@]}"
}


#
# arguments
#

args=()
args_profile=
args_config=
args_cmd=

parse_config() {
	# --config is a global parameter and is only accepted before a command
	if [[ $args_cmd ]]; then
		return
	fi
	args_have_config=1
	args_config="$1"
}

parse_cmd() {
	# only the first free argument is the command
	if [[ $args_cmd ]]; then
	       return
	fi	       
	args_have_cmd=1
	args_cmd="$1"
	args_profile="$2"
}

parse_profile() {
	args_have_profile=1
	args_profile="$1"
}

while (( $# )); do
	case "$1" in
	--config)    parse_config "$2" ;;
	--config=*)  parse_config "${1#--config=}" ;;

	run|\
	build|\
	check|\
	rustc)      parse_cmd "$1" dev ;;
	test)        parse_cmd "$1" test ;;
	bench)       parse_cmd "$1" bench ;;
	install)     parse_cmd "$1" release ;;

	--profile)   parse_profile "$2" ;;
	--profile=*) parse_profile "${1#--profile=}" ;;
	--release)   parse_profile release ;;
	--dev)       parse_profile dev ;;

	# if we got to --, there won't be any parsable arguments, bail
	--) break ;;
	esac

	args+=( "$1" )
	shift
done

if [[ ! $args_config ]]; then
	case "$args_profile" in
	bench|release)   try_configs "$args_profile" "release" ;;
	dev|test|'')     try_configs "$args_profile" "dev" ;;
	# TODO parse the profile to find out what it inherits from?
	rel-*|release-*) try_configs "$args_profile" "release" ;;
	*) ;;
	esac

	# default custom config
	try_config "$HOME/.cargo/config-my.toml"
fi

call_cargo "${args[@]}" "$@"
