#!/bin/bash

. lib.sh || exit

ARGS=$(getopt -o '-P:b:' --long 'prefix:,branch:,prefix-any' -n "${0##*/}" -- "$@") || exit
eval set -- "$ARGS"
unset ARGS

ARG_PREFIX=
ARG_PREIX_ANY=
ARG_BRANCH=
ARGS=()

while (( $# )); do
	case "$1" in
	-P|--prefix)
		ARG_PREFIX="$2"
		shift 2
		;;
	--prefix-any)
		ARG_PREFIX_ANY=1
		shift
		;;
	-b|--branch)
		ARG_BRANCH="$2"
		shift 2
		;;
	*)
		ARGS+=( "$1" )
		shift
		;;
	esac
done

set -- "${ARGS[@]}"

[[ "$ARG_BRANCH" ]] || die "missing required option: -b/--branch"
if [[ "$ARG_PREFIX" && "$ARG_PREFIX_ANY" ]]; then
	die "invalid options: -P/--prefix and --prefix-any cannot be used together"
elif ! [[ "$ARG_PREFIX" || "$ARG_PREFIX_ANY" ]]; then
	die "invalid options: one of -P/--prefix or --prefix-any is required"
fi

cleanup() {
	git for-each-ref --format 'delete %(refname)' 'refs/exported/*' \
		| git update-ref --stdin
}
trap cleanup EXIT

if git for-each-ref --format '%(refname)' 'refs/exported/*' | grep -q .; then
	die "internal error: refs/exported/* namespace is not empty"
fi

mangle_filenames() {
	if [[ "$ARG_PREFIX" ]]; then
		sed -r \
			-e "s|^(M) ([^ ]+) ([^ ]+) ${ARG_PREFIX}/(.+)$|\\1 \\2 \\3 \\4|" \
			-e "s|^(D) ${ARG_PREFIX}/(.+)$|\\1 \\2|" \

	else
		sed -r \
			-e "s|^(M) ([^ ]+) ([^ ]+) (([^/]+)/)*([^/]+)$|\\1 \\2 \\3 \\6|" \
			-e "s|^(D) (([^/]+)/)*([^/]+)$|\\1 \\4|" \

	fi
}

#trace git branch -f "$ARG_BRANCH" "$(git rev-list -1 "${ARGS[@]}")"
git fast-export --refspec 'refs/heads/*:refs/exported/*' "${ARGS[@]}" \
	| mangle_filenames \
	| tee git-fast-export-stream \
	| git fast-import
git for-each-ref --format '%(refname)' 'refs/exported/*' \
	| readarray -t EXPORTED_REFS
if (( ${#EXPORTED_REFS[@]} != 1 )); then
	die "internal error: exported ${#EXPORTED_REFS[@]} != 1 refs: $(join ", " "${EXPORTED_REFS[@]}")"
fi

git branch -f "$ARG_BRANCH" "$EXPORTED_REFS"
