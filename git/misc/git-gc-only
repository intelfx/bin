#!/bin/bash -e

#
# git-gc-only -- `git gc` only given packs
#

set -eo pipefail
shopt -s lastpipe

log() {
	echo ":: $*" >&2
}

err() {
	echo "E: $*" >&2
}

die() {
	err "$@"
	exit 1
}

GIT_DIR="$(git rev-parse --git-dir)"

cleanup() {
	rm -f "$GIT_DIR/objects/pack"/*.keep
}
trap cleanup EXIT

now="$(date +%s)"

declare -A GC_PACKS
declare -a GC_ARGS
stop=
for arg; do
	if [[ $arg == -- ]]; then
		stop=1
	elif (( !stop )) && [[ $arg == -* ]]; then
		GC_ARGS+=( "$arg" )
	elif (( stop )) || [[ $arg == *.pack ]]; then
		arg="${arg##*/}"
		GC_PACKS["$arg"]="1"
	else
		die "Bad argument: ${arg@Q}"
	fi
done
set -- "${GC_ARGS[@]}"

find "$GIT_DIR/objects/pack" \
	-type f \
	-name '*.pack' \
| while read pack; do

	# HACK: use the older of .pack and .idx mtimes.
	# Sometimes, `git fetch` touches old packs for no good reason, breaking
	# this logic.
	idx="${pack%.pack}.idx"
	size="$(stat -c '%s' "$pack")"
	mtime_pack="$(stat -c '%Y' "$pack")"
	mtime_idx="$(stat -c '%Y' "$idx")"
	mtime="$(( mtime_idx < mtime_pack ? mtime_idx : mtime_pack ))"

	name="${pack##*/}"

	if [[ "${GC_PACKS["$name"]}" ]]; then
		echo "Repacking: ${pack##*/} @ $(du --human-readable --apparent-size "$pack" | cut -d$'\t' -f1) ($(date -d "@$mtime"))"
		continue
	fi

	echo "Keeping pack: ${pack##*/} @ $(du --human-readable --apparent-size "$pack" | cut -d$'\t' -f1) ($(date -d "@$mtime"))"
	touch "${pack%.pack}.keep"
done

git gc "$@"
