#!/bin/bash

set -eo pipefail
shopt -s lastpipe
shopt -s nullglob

log() {
	echo ":: $*" >&2
}

err() {
	echo "E: $*" >&2
}

die() {
	err "$@"
	exit 1
}

usage() {
	if (( $# )); then
		echo "${0##*/}: $*" >&2
		echo >&2
	fi
	_usage >&2
	exit 1
}

_usage() {
	cat <<EOF
Usage: ${0##*/}
EOF
}


#
# git-gc-fetch -- `git gc` after fetching many redundant packs
#


#
# args
#

now="$(date +%s)"
SMALL_PACK_BYTES="$(( 50*1024*1024 ))"
OLD_PACK_TIME="$(( now - 24*3600 ))"
GIT_GC=0
GIT_GC_NO_PRUNE=0
FORCE=0
PACK_ARGS=()

if args=$(getopt -o '+S:T:s:gGbmf' --long 'size:,time:,seconds:,gc,gc-no-prune,bitmap,midx,force' -n "${0##*/}" -- "$@"); then
	eval set -- "$args"
else
	usage
fi
unset args

while :; do
	case "$1" in
	-S|--size) shift; SMALL_PACK_BYTES="$(bscalcq -b "$1")" ;;
	-T|--time) shift; OLD_PACK_TIME="$(date -d "$1" +%s)" ;;
	-s|--seconds) shift; OLD_PACK_TIME="$(( now - "$1" ))" ;;
	-g|--gc) GIT_GC=1 ;;
	-G|--gc-no-prune) GIT_GC_NO_PRUNE=1 ;;
	-b|--bitmap) PACK_ARGS+=( --write-bitmap-index ) ;;
	-m|--midx) PACK_ARGS+=( --write-midx ) ;;
	-f|--force) FORCE=1 ;;
	--) shift; break ;;
	*) die "getopt error" ;;
	esac
	shift
done

# case "$#" in
# 0) ;;
# *) usage "wrong number of positional arguments" ;;
# esac


#
# main
#

GIT_DIR="$(git rev-parse --git-dir)"

cleanup() {
	rm -f "$GIT_DIR/objects/pack"/*.keep
}
trap cleanup EXIT

declare -a PACKS

find "$GIT_DIR/objects/pack" \
	-type f \
	\( -name '*.pack' -or -name 'tmp_pack_*' \) \
| while read pack; do

	mtime="$(stat -c '%Y' "$pack")"

	# HACK: use the older of .pack and .idx mtimes.
	# Sometimes, `git fetch` touches old packs for no good reason, breaking
	# this logic.
	if [[ $pack == *.pack ]]; then
		idx="${pack%.pack}.idx"
		mtime_pack="$mtime"
		mtime_idx="$(stat -c '%Y' "$idx")"
		mtime="$(( mtime_idx < mtime_pack ? mtime_idx : mtime_pack ))"
	fi

	PACKS+=("$mtime"$'\t'"$pack")
done

if ! [[ ${PACKS+set} ]]; then
	echo "Nothing to pack"
	exit
fi

CANDIDATES=0

printf "%s\n" "${PACKS[@]}" \
| sort -n -t $'\t' -k1 \
| while read -r mtime pack; do

	idx="${pack%.pack}.idx"
	size="$(stat -c '%s' "$pack")"

	human_size="$(du --human-readable --apparent-size "$pack" | cut -d$'\t' -f1)"
	human_mtime="$(date -d "@$mtime")"

	if [[ $pack == */tmp_pack_* ]]; then
		echo "Temporary pack, forcing: ${pack##*/} @ $human_size ($human_mtime)"
		(( ++CANDIDATES ))
		FORCE=1
		continue
	fi

	cruft="${pack%.pack}.mtimes"
	if [[ -e $cruft ]]; then
		echo "Skipping cruft pack: ${pack##*/} @ $human_size ($human_mtime)"
		continue
	fi

	# repack everything after the first candidate pack
	if (( CANDIDATES )); then
		repack=1

	# repack all recent packs
	elif (( mtime > OLD_PACK_TIME )); then
		repack=1

	# do not bother keeping very small packs
	elif (( size < SMALL_PACK_BYTES )); then
		repack=1

	# keep the rest
	else
		repack=0
	fi

	if (( repack )); then
		echo "Repacking: ${pack##*/} @ $human_size ($human_mtime)"
		(( ++CANDIDATES ))
	else
		echo "Keeping pack: ${pack##*/} @ $human_size ($human_mtime)"
		touch "${pack%.pack}.keep"
	fi
done

if (( !FORCE && CANDIDATES < 2 )); then
	echo "Nothing to repack"
	exit
fi

if (( GIT_GC )); then
	git \
		-c pack.depth=50 -c pack.window=1000 \
		-c gc.writeCommitGraph=true \
		-c gc.pruneExpire=now \
		gc --keep-largest-pack --prune=now "$@"
elif (( GIT_GC_NO_PRUNE )); then
	git \
		-c pack.depth=50 -c pack.window=1000 \
		-c gc.writeCommitGraph=true \
		-c gc.cruftPacks=true \
		-c gc.pruneExpire=never \
		-c gc.reflogExpire=never \
		-c gc.reflogExpireUnreachable=never \
		gc --keep-largest-pack --no-prune "$@"
else
	git \
		repack \
		--cruft -d -l \
		--depth=50 --window=1000 \
		"${PACK_ARGS[@]}" \
		"$@"
	git \
		commit-graph \
		write
fi

rm -vf "$GIT_DIR/objects/pack"/tmp_pack_*
