#!/bin/bash

#
# git-gc-fetch -- `git gc` after fetching many redundant packs
#

set -eo pipefail
shopt -s lastpipe

RECENT_PACK_SEC="$(( 24*3600 ))"
SMALL_PACK_BYTES="$(( 50*1024*1024 ))"

GIT_DIR="$(git rev-parse --git-dir)"

cleanup() {
	rm -f "$GIT_DIR/objects/pack"/*.keep
}
trap cleanup EXIT

now="$(date +%s)"
candidate_packs=0

GIT_GC=0
while (( $# )); do
	case "$1" in
	--gc) GIT_GC=1 ;;
	*) break ;;
	esac
	shift
done

find "$GIT_DIR/objects/pack" \
	-type f \
	-name '*.pack' \
| while read pack; do

	# HACK: use the older of .pack and .idx mtimes.
	# Sometimes, `git fetch` touches old packs for no good reason, breaking
	# this logic.
	idx="${pack%.pack}.idx"
	size="$(stat -c '%s' "$pack")"
	mtime_pack="$(stat -c '%Y' "$pack")"
	mtime_idx="$(stat -c '%Y' "$idx")"
	mtime="$(( mtime_idx < mtime_pack ? mtime_idx : mtime_pack ))"

	human_size="$(du --human-readable --apparent-size "$pack" | cut -d$'\t' -f1)"
	human_mtime="$(date -d "@$mtime")"
	if (( mtime > now - RECENT_PACK_SEC )); then
		echo "Repacking: ${pack##*/} @ $human_size ($human_mtime)"
		(( ++candidate_packs ))
		continue
	fi
	# do not bother keeping very small packs
	if (( size < SMALL_PACK_BYTES )); then
		echo "Repacking: ${pack##*/} @ $human_size ($human_mtime)"
		(( ++candidate_packs ))
		continue
	fi

	echo "Keeping pack: ${pack##*/} @ $human_size ($human_mtime)"
	touch "${pack%.pack}.keep"
done

if (( candidate_packs < 2 )); then
	echo "Nothing to repack"
	exit
fi

if (( GIT_GC )); then
	git \
		-c gc.pruneExpire=now \
		gc --keep-largest-pack --prune=now "$@"
else
	git \
		repack \
		--cruft -d -l \
		--write-bitmap-index \
		"$@"
fi
