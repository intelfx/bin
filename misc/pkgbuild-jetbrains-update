#!/bin/bash

set -eo pipefail
shopt -s lastpipe

# shellcheck source=../lib/lib.sh
. lib.sh


#
# constants
#

declare -A JETBRAINS_CODES=(
	[clion]=CL
	[goland]=GO
	[datagrip]=DG
	[pycharm]=PCP
	[rustrover]=RR
	[webstorm]=WS
)


#
# args
#

_usage() {
	cat <<EOF
Usage: $0 [-s|--stage] [-c|--commit] [PKGBUILD-DIR]
EOF
}

declare -A _ARGS=(
	[-s|--stage]=ARG_STAGE
	[-c|--commit]=ARG_COMMIT
	[--]=ARGS
)
parse_args _ARGS "$@" || usage

case "${#ARGS[@]}" in
0) DIRS=(.) ;;
*) DIRS=("${ARGS[@]}") ;;
esac


#
# functions
#

update_one() (
	set -eo pipefail
	shopt -s lastpipe
	eval "$(ltraps)"

	local dir="$1"

	if ! [[ -d "$dir" && -f "$dir/PKGBUILD" ]]; then
		die "Invalid directory: $dir"
	fi

	cd "$dir"
	mksrcinfo

	local name ver
	name="$(aur srcinfo -Qr '.pkgbase')"
	ver="$(aur srcinfo -Qr '.pkgver')"
	local LIBSH_LOG_PREFIX="$name"

	declare -A filename_to_arch
	declare -a sed_expr

	cat .SRCINFO | sed -nr 's|\tsource_([^ ]+) = (.+::)?(.+)|\1 \3|p' | while read arch link; do
		filename="${link##*/}"
		filename_to_arch["$filename"]="$arch"
	done

	cat .SRCINFO | sed -nr 's|\tsource_([^ ]+) = (.+::)?(.+)|\1 \3|p' | while read arch link; do
		echo "${link}.sha256"
	done | parallel 'set -x; curl -fsSL' | while read sha256sum filename; do
		filename="${filename#\*}"
		arch="${filename_to_arch[$filename]}"
		sed_expr+=(
			-e "s|(sha256sums_$arch)=.*|\1=('$sha256sum')|"
		)
	done

	sed -r "${sed_expr[@]}" -i PKGBUILD
	mksrcinfo

	if ! [[ $ARG_STAGE || $ARG_COMMIT ]]; then
		return
	fi

	if git diff-files --quiet && git diff-index --quiet HEAD --; then
		log "No changes"
		return
	fi

	git add PKGBUILD .SRCINFO

	if ! [[ $ARG_COMMIT ]]; then
		return
	fi

	local kind build msg
	if [[ $ver =~ ^([0-9.]+)$ ]]; then
		msg="$name: $ver"
	elif [[ $ver =~ ^([0-9.]+)([a-z]+)\+([0-9.]+)$ ]]; then
		ver="${BASH_REMATCH[1]}"
		kind="${BASH_REMATCH[2]}"
		build="${BASH_REMATCH[3]}"

		case "$kind" in
		pre) kind=EAP ;;
		*)   kind="${kind^^}" ;;
		esac

		msg="$name: $ver $kind $build"
	fi

	log "Committing changes"
	git commit -m "$msg"
)

rc=0
for d in "${DIRS[@]}"; do
	update_one "$d" || rc=1
done
exit "$rc"
