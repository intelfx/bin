#!/bin/bash

. lib.sh || exit

#
# args & usage
#

_usage() {
	cat <<EOF
Usage: pg_backup_to [-D|--directory POSTGRES-ROOT] [-p|--port POSTGRES-PORT]
                    [ [-o|--output OUTPUT-FILE] | [-O|--output-dir OUTPUT-DIR] ]
                    [-d|--databases DATABASES]
                    [[-c|--compress COMPRESSOR-CMDLINE] | [-N|--no-compress]]
                    [--] [POSTGRES-ROOT]
EOF
}

declare -A ARGS=(
	[-D|--directory:]="ARG_PGROOT"
	[-p|--port:]="ARG_PGPORT"
	#[-o|--output:]="ARG_OUTPUT"
	[-O|--output-dir:]="ARG_OUTPUT_DIR"
	[-c|--compress:]="ARG_COMPRESS"
	[-N|--no-compress]="ARG_NOCOMPRESS"
	[-d|--databases:]="ARG_DATABASES split=, append"
	[--]="ARG_REMAINDER"
)

parse_args ARGS "$@" || usage

case "${#ARG_REMAINDER[@]}" in
1)
	[[ ! ${ARG_PGROOT+set} ]] || usage "Both -D/--directory and a positional parameter passed"
	ARG_PGROOT="${ARG_REMAINDER}"
	;;
0)
	[[ ${ARG_PGROOT+set} ]] || usage "-D/--directory not passed"
	;;
*)
	usage "Expected at most 1 positional parameter"
	;;
esac
if ! sudo -u postgres test -d "$ARG_PGROOT" -a -r "$ARG_PGROOT"; then
	die "-D/--directory does not exist or is unreadable: $ARG_PGROOT"
fi
if sudo -u postgres test \( \! -e "$ARG_PGROOT/PG_VERSION" \) -a \( -e "$ARG_PGROOT/data/PG_VERSION" \); then
	warn "-D/--directory is $ARG_PGROOT instead of $ARG_PGROOT/data; adjusting"
	ARG_PGROOT="$ARG_PGROOT/data"
fi
ARG_PGROOT="$(sudo -u postgres realpath -qe "$ARG_PGROOT")"
log "PostgreSQL directory: $ARG_PGROOT"

if ! [[ ${ARG_OUTPUT_DIR+set} ]]; then
	usage "-O/--output-dir not set"
fi
if [[ -s "$ARG_OUTPUT_DIR" ]]; then
	die "-O/--output-dir not empty"
fi
ARG_OUTPUT_DIR="$(realpath -qm "$ARG_OUTPUT_DIR")"
log "Output directory: $ARG_OUTPUT_DIR"

if ! [[ ${ARG_PGPORT+set} ]]; then
	ARG_PGPORT="$(( 54320 + (RANDOM % 10) ))"
	log "Port: $ARG_PGPORT (-p/--port not set)"
else
	log "Port: $ARG_PGPORT"
fi

if [[ ${ARG_NOCOMPRESS+set} ]]; then
	COMPRESS_ARGS=()
	EXTENSION=""
elif [[ "$ARG_COMPRESS" ]]; then
	read -ra COMPRESS_ARGS <<<"$ARG_COMPRESS"
	case "$(basename "${COMPRESS_ARGS[0]}")" in
	gzip|pigz)
		EXTENSION=".gz" ;;
	xz|pixz)
		EXTENSION=".xz" ;;
	bzip2|pbzip2)
		EXTENSION=".bz2" ;;
	lrzip)
		EXTENSION=".lrz" ;;
	zstd|zstdmt)
		EXTENSION=".zst"
		unset zst_has_threads
		for a in "${COMPRESS_ARGS[@]:1}"; do
			if [[ ($a != --* && $a == -*T*) || $a == --threads* ]]; then
				zst_has_threads=1
			elif [[ $a == -- ]]; then
				break
			fi
		done
		if [[ ! ${zst_has_threads+set} ]]; then
			log "zstd: adding -T0 to command line"
			COMPRESS_ARGS=( "${COMPRESS_ARGS[0]}" -T0 "${COMPRESS_ARGS[@]:1}" )
		fi
		;;
	*)
		die "Unknown compressor: ${ARG_COMPRESS[0]}" ;;
	esac
else
	COMPRESS_ARGS=(
		zstd -T0 -19
	)
	EXTENSION=".zst"
fi

if [[ ${COMPRESS_ARGS+set} ]]; then
	log "Compression: ${COMPRESS_ARGS[@]} ($EXTENSION)"
	COMPRESS_LINE="${COMPRESS_ARGS[*]@Q} -o"
else
	log "Compression: disabled"
	COMPRESS_LINE="cat >"
fi


#
# cleanup
#

eval "$(globaltraps)"

unset OK
fail_cleanup() {
	if ! [[ ${OK+set} ]]; then
		trace rm -vf "$ARG_OUTPUT_DIR"/*
	fi
}
ltrap fail_cleanup

SYSTEMD_UNITS=()
systemd_cleanup() {
	for u in "${SYSTEMD_UNITS[@]}"; do
		case "$(systemctl is-enabled "$u")" in
		not-found) continue ;;
		esac

		case "$(systemctl is-active "$u")" in
		active) trace sudo systemctl stop "$u" ;;
		failed) trace sudo systemctl status "$u" ;;
		inactive) ;;
		esac

		trace sudo systemctl reset-failed "$u" 2>/dev/null
	done
}
ltrap systemd_cleanup


#
# main
#

POSTGRES_ARGS=(
	postgres
	-D "$ARG_PGROOT"
	-k "$ARG_PGROOT"
	-c "huge_pages=off"
	-h ''
	-p "$ARG_PGPORT"
)
SYSTEMD_UNITS+=( "pg_backup_to-$ARG_PGPORT.service" )
sudo systemd-run \
	--unit "pg_backup_to-$ARG_PGPORT.service" \
	--service-type=notify \
	-p User=postgres \
	"${POSTGRES_ARGS[@]}"


dumpall() {
	# find(1) bails if $PWD is inaccessible to the current user, which it
	# might become after changing user to postgres
	sudo -u postgres env -C / find "$ARG_PGROOT" -type f -name '*.conf' -printf '%P\n' | readarray -t configs

	if ! [[ ${configs+set} ]]; then
		die "No .conf files found under $ARG_PGROOT"
	fi

	TAR_ARGS=(
		tar
		-c
		-C "$ARG_PGROOT"
		--
		"${configs[@]}"
	)
	PG_DUMP_ARGS=(
		pg_dumpall
		-h "$ARG_PGROOT"
		-p "$ARG_PGPORT"
		-Upostgres
		-E UTF-8
		--clean
		--if-exists
	)
	SYSTEMD_UNITS+=( "pg_backup_to-$ARG_PGPORT-dump.service" )

	setuidgid="$(command -v setuidgid)"
	sudo systemd-run \
		--unit "pg_backup_to-$ARG_PGPORT-dump.service" \
		--service-type=exec \
		--pty --same-dir --wait --collect \
		bash -c "
		set -eo pipefail;
		mkdir -p ${ARG_OUTPUT_DIR@Q};
		$setuidgid postgres ${TAR_ARGS[*]@Q} | $setuidgid $(whoami) ${COMPRESS_LINE} ${ARG_OUTPUT_DIR@Q}/conf.tar$EXTENSION;
		$setuidgid postgres ${PG_DUMP_ARGS[*]@Q} | $setuidgid $(whoami) ${COMPRESS_LINE} ${ARG_OUTPUT_DIR@Q}/pg_dumpall.sql$EXTENSION;
		"
	OK=1
}

dumpdbs() {
	local -a dbs=("$@")
	PG_DUMP_ARGS=(
		pg_dump
		-h "$ARG_PGROOT"
		-p "$ARG_PGPORT"
		-Upostgres
		-E UTF-8
		--clean
		--create
		--if-exists
	)

	SYSTEMD_UNITS+=( "pg_backup_to-$ARG_PGPORT-dump.service" )

	setuidgid="$(command -v setuidgid)"
	sudo systemd-run \
		--unit "pg_backup_to-$ARG_PGPORT-dump.service" \
		--service-type=exec \
		--pty --same-dir --wait --collect \
		bash -c "
		set -eo pipefail;
		mkdir -p ${ARG_OUTPUT_DIR@Q};
		for db in ${dbs[*]@Q}; do
			$setuidgid postgres ${PG_DUMP_ARGS[*]@Q} \"\$db\" | $setuidgid $(whoami) ${COMPRESS_LINE} ${ARG_OUTPUT_DIR@Q}/pg_dump.\"\$db\".sql$EXTENSION;
		done
		"
	OK=1
}

if [[ ${ARG_DATABASES+set} ]]; then
	dumpdbs "${ARG_DATABASES[@]}"
else
	dumpall
fi
