#!/usr/bin/env python3

#
# btrfs-sub-find -- a _sane_ alternative to `btrfs subvolume list`.
#

from typing import *

import os
import os.path as p
import sys
import argparse
import logging
import attr

import btrfs
import enum
import libmount


T = TypeVar('T')


def configure_logging(*, prefix=None, handler=None, **kwargs):
	fmt = '%(levelname)s: %(message)s'

	if prefix is not None:
		fmt = f'{prefix}: ' + fmt

	if handler is not None:
		kwargs.update({
			'handlers': [ handler ],
		})

	logging.basicConfig(
		level='LIB_DEBUG' in os.environ and logging.DEBUG or logging.INFO,
		format=fmt,
		**kwargs,
	)


@attr.s(kw_only=True)
class FindSubvolumeArgs:
	class Filter(enum.Enum):
		Path = 0
		Mountpoint = 1
		All = 2

	class Output(enum.Enum):
		Find = 0
		FindRelative = 1
		Physical = 2
		MountpointRelative = 3
		Absolute = 4

	list_root_subvolume: bool = attr.ib()
	filter: Filter = attr.ib()
	output: Output = attr.ib()
	paths: List[str] = attr.ib()


def parse_args() -> FindSubvolumeArgs:
	parser = argparse.ArgumentParser(
		description='''
btrfs-sub-find -- a _sane_ alternative to `btrfs subvolume list`, designed for scripting and automation
'''.strip(),
	)

	parser.add_argument('path', default=['.'], nargs='*', type=str,
		help='Path to the filesystem and/or to the search root',
	)

	path_mode = parser.add_mutually_exclusive_group()
	path_mode.add_argument('-f', '--find', action='store_const',
		dest='output', const=FindSubvolumeArgs.Output.Find,
		help='Show pathes of subvolumes using specified search root (`find -print`)',
	)
	path_mode.add_argument('-r', '--relative', action='store_const',
		dest='output', const=FindSubvolumeArgs.Output.FindRelative,
		help='Show pathes of subvolumes relative to the search root (`find -printf \'%%P\\n\'`)',
	)
	path_mode.add_argument('-a', '--absolute', action='store_const',
		dest='output', const=FindSubvolumeArgs.Output.Absolute,
		help='Show absolute pathes of subvolumes (prepend mountpoint)',
	)
	path_mode.add_argument('-m', '--mountpoint', action='store_const',
		dest='output', const=FindSubvolumeArgs.Output.MountpointRelative,
		help='Show pathes of subvolumes relative to the mountpoint',
	)
	path_mode.add_argument('-p', '--physical', action='store_const',
		dest='output', const=FindSubvolumeArgs.Output.Physical,
		help='Show physical pathes of subvolumes within filesystem (from the root subvolume)',
	)
	parser.add_argument('-M', '--visible', action='store_const',
		dest='filter', const=FindSubvolumeArgs.Filter.Mountpoint,
		help='Consider all subvolumes below mountpoint, not just those below search path'
	)
	parser.add_argument('-A', '--all', action='store_const',
		dest='filter', const=FindSubvolumeArgs.Filter.All,
		help='Consider all subvolumes in the filesystem, not just those currently visible'
		     ' (only possible with --physical output)',
	)
	parser.add_argument('-R', '--root-subvolume', action='store_true',
		help='Consider the root subvolume too',
	)
	#parser.add_argument('-F', '--format',
	#	help='Print subvolumes using this Python 3 str.format() specification (available variables: {path})',
	#)

	raw = parser.parse_args()
	# noinspection PyArgumentList
	args = FindSubvolumeArgs(
		paths=raw.path,
		filter=raw.filter or FindSubvolumeArgs.Filter.Path,
		output=raw.output or FindSubvolumeArgs.Output.Find,
		list_root_subvolume=raw.root_subvolume,
	)

	if args.filter == FindSubvolumeArgs.Filter.All \
	and args.output != FindSubvolumeArgs.Output.Physical:
		parser.error('-A/--all is only allowed with -p/--physical!')

	return args


def _do_btrfs_search(
	fs: btrfs.ctree.FileSystem,
	tree: int,
	min_key: btrfs.ctree.Key,
	max_key: btrfs.ctree.Key,
	factory: Callable[..., T]
) -> Iterable[T]:
	for header, data in btrfs.ioctl.search_v2(
			fd=fs.fd,
			tree=tree,
			min_key=min_key,
			max_key=max_key,
		):
		yield factory(header, data)


def _do_lookup_root_item(fs: btrfs.ctree.FileSystem, tree_id: int) -> btrfs.ctree.RootItem:
	root_items = list(_do_btrfs_search(
		fs=fs,
		tree=btrfs.ctree.ROOT_TREE_OBJECTID,
		min_key=btrfs.ctree.Key(tree_id, btrfs.ctree.ROOT_ITEM_KEY, 0),
		max_key=btrfs.ctree.Key(tree_id, btrfs.ctree.ROOT_ITEM_KEY, -1),
		factory=btrfs.ctree.RootItem,
	))

	logging.debug(f'_do_lookup_root_item(tree_id={tree_id}): {root_items}')
	assert (len(root_items) == 1)
	return root_items[0]


@attr.s(kw_only=True)
class Subvolume:
	tree_id: int = attr.ib()
	root_item: btrfs.ctree.RootItem = attr.ib()
	root_ref: btrfs.ctree.RootRef = attr.ib()
	path: bytes = attr.ib()


def _do_list_subvolumes(fs: btrfs.ctree.FileSystem, parent: Subvolume, search_root: bytes) -> Iterator[Subvolume]:
	#
	# There is a great method btrfs.ctree.FileSystem.subvolumes() that
	# is supposed to return all subvolume root items in a filesystem.
	# Unfortunately, it is completely useless.
	#

	for root_ref in _do_btrfs_search(
			fs=fs,
			tree=btrfs.ctree.ROOT_TREE_OBJECTID,
			min_key=btrfs.ctree.Key(parent.tree_id, btrfs.ctree.ROOT_REF_KEY, 0),
			max_key=btrfs.ctree.Key(parent.tree_id, btrfs.ctree.ROOT_REF_KEY, -1),
			factory=btrfs.ctree.RootRef,
		):
		# lookup the directory containing the subvolume in its parent subvolume
		# both are pointed to by the RootRef
		dir = btrfs.ioctl.ino_lookup(fd=fs.fd, treeid=root_ref.parent_tree, objectid=root_ref.dirid)
		# noinspection PyArgumentList
		subvol = Subvolume(
			tree_id=root_ref.tree,
			root_item=_do_lookup_root_item(fs=fs, tree_id=root_ref.tree),
			root_ref=root_ref,
			path=p.join(parent.path, dir.name_bytes, root_ref.name),
		)
		logging.debug(f'_do_list_root_refs(parent={str(parent)}): {str(subvol)}')

		commonpath = p.commonpath((subvol.path, search_root))
		# if subvol is below search root, it is a match
		if commonpath == search_root:
			yield subvol
		# if subvol is below search root or search root is below subvol, descend
		if commonpath == search_root or commonpath == subvol.path:
			yield from _do_list_subvolumes(fs, parent=subvol, search_root=search_root)


def list_subvolumes(fs: btrfs.ctree.FileSystem, search_root: bytes, list_root_subvolume: bool):
	# noinspection PyArgumentList
	root_subvol = Subvolume(
		tree_id=btrfs.ctree.FS_TREE_OBJECTID,
		root_item=_do_lookup_root_item(fs=fs, tree_id=btrfs.ctree.FS_TREE_OBJECTID),
		root_ref=None,
		path=b'/',
	)

	if list_root_subvolume and search_root == b'/':
		yield root_subvol
	yield from _do_list_subvolumes(fs, parent=root_subvol, search_root=search_root)


g_mountinfo: List[libmount.Fs] = []


def read_mountinfo():
	global g_mountinfo
	if not g_mountinfo:
		table = libmount.Table(path='/proc/self/mountinfo')
		# longest first
		g_mountinfo = sorted(
			iter(table.next_fs, None),
			key=lambda x: len(x.target),
			reverse=True,
		)


def p_join_norm(path: str, *paths: str) -> str:
	# compensate for '.' from p.relpath(), but don't use p.normpath()
	return p.join(path, *[ x for x in paths if x not in ('', '.') ])


# find mountpoint for vfs path
def path_vfs_to_mountpoint(path: str) -> Tuple[libmount.Fs, str]:
	global g_mountinfo
	realpath = p.realpath(path)
	logging.debug(f'path_vfs_to_mountpoint(path={path}): realpath {realpath}')

	fs: libmount.Fs
	for fs in g_mountinfo:
		# fs.target is guaranteed normalized
		if p.commonpath((fs.target, realpath)) == fs.target:
			# p.relpath('/', '/') returns '.' rather than empty string (ugh!)
			# but we are better compensating for this elsewhere
			subpath = p.relpath(realpath, start=fs.target)
			logging.debug(f'path_vfs_to_mountpoint(path={path}): realpath {realpath} -> fs {fs}, subpath {subpath}')
			return fs, subpath

	raise RuntimeError(f'path_vfs_to_mountpoint(path={path}): could not find a filesystem!')


# find physical path (full path inside the btrfs volume) for vfs path
def path_vfs_to_physical(path: str) -> str:
	fs, subpath = path_vfs_to_mountpoint(path)
	physpath = p_join_norm(fs.root, subpath)
	logging.debug(f'path_vfs_to_absolute_physical(path={path}): fs root {fs.root}, physpath {physpath}')
	return physpath


def find_subvolumes(fs: btrfs.ctree.FileSystem, args: FindSubvolumeArgs, search_root: str):
	if args.filter == FindSubvolumeArgs.Filter.Path:
		search_root = path_vfs_to_physical(search_root)
	elif args.filter == FindSubvolumeArgs.Filter.Mountpoint:
		search_root = path_vfs_to_mountpoint(search_root)[0].root
	elif args.filter == FindSubvolumeArgs.Filter.All:
		search_root = '/'
	else:
		raise RuntimeError(f'find_subvolumes(): internal error: bad filter type: {args.filter}')

	return list_subvolumes(
		fs=fs,
		search_root=search_root.encode('utf-8'),
		list_root_subvolume=args.list_root_subvolume,
	)


def main():
	configure_logging(prefix='btrfs-sub-find')
	args = parse_args()
	read_mountinfo()

	last_fs_root = None
	fs = None

	for search_root in args.paths:
		search_fs, search_subpath = path_vfs_to_mountpoint(search_root)
		search_root_physical = path_vfs_to_physical(search_root)

		if last_fs_root != search_fs.root:
			last_fs_root = search_fs.root
			fs = btrfs.ctree.FileSystem(search_root)
			logging.debug(f'btrfs.ctree.FileSystem(path={search_root}): {fs}')

		for s in find_subvolumes(fs=fs, args=args, search_root=search_root):
			path = s.path.decode('utf-8')
			if args.output == FindSubvolumeArgs.Output.Physical:
				pass
			elif args.output == FindSubvolumeArgs.Output.Find:
				path = p_join_norm(search_root, p.relpath(path, start=search_root_physical))
			elif args.output == FindSubvolumeArgs.Output.FindRelative:
				path = p.relpath(path, start=search_root_physical)
			elif args.output == FindSubvolumeArgs.Output.MountpointRelative:
				path = p.relpath(path, start=search_fs.root)
			elif args.output == FindSubvolumeArgs.Output.Absolute:
				path = p_join_norm(search_fs.target, p.relpath(path, start=search_fs.root))
			print(path)


if __name__ == "__main__":
	main()
