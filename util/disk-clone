#!/bin/bash

. lib.sh || exit

shopt -s extglob
shopt -s nullglob

_usage() {
	cat <<EOF
Usage: $0 [--luks=<dd|clone|recreate>] <source> <destination>
EOF
}

#
# lib.sh logging overrides
#

export LIBSH_LOG_INDENT=0

function indent() {
	(( ++LIBSH_LOG_INDENT ))
}
function unindent() {
	if (( LIBSH_LOG_INDENT > 0 )); then
		(( --LIBSH_LOG_INDENT )) ||:
	fi
}
function unindent_all() {
	LIBSH_LOG_INDENT=0
}
function log() {
	if (( LIBSH_LOG_INDENT )); then
		local i
		local indent=''
		for (( i = 0; i < LIBSH_LOG_INDENT; ++i )); do
			indent+='   '
		done
		_libsh_log "${indent}->" "$LIBSH_LOG_PREFIX" "$*"
	else
		_libsh_log "::" "$LIBSH_LOG_PREFIX" "$*"
	fi
}

function lindent() {
	echo "local LIBSH_LOG_INDENT=\"\$(( LIBSH_LOG_INDENT + 1 ))\""
}

function lunindent() {
	echo "unset LIBSH_LOG_INDENT"
}


#
# functions
#

function blk_size() {
	blockdev --getsize64 "$1"
}


function file_size() {
	stat -c "%s" "$1"
}


function get_size() {
	local dev="$1"
	if [[ -b "$dev" ]]; then
		blk_size "$dev"
	elif [[ -e "$dev" ]]; then
		file_size "$dev"
	else
		echo 0
	fi
}


function exists() {
	[[ -e "$1" ]]
}


function blkid_src() {
	blkid "$src_part" -o value -s "$*"
}


function cleanup_detach() {
	unindent_all
	local dev="$1"
	local origin="$(losetup -n -O BACK-FILE "$dev")" || origin="<unknown>"
	log "detaching $dev (loop for $origin)"
	losetup -d "$dev"
}


function cleanup_remove() {
	unindent_all
	local dev="$1"
	if [[ -e "$dev" && ! -b "$dev" ]]; then
		log "removing $dev"
		rm -f "$dev"
	fi
}

function cleanup_remove_fail() {
	if (( SUCCESS )); then
		return
	fi

	cleanup_remove "$@"
}

function cleanup_close() {
	unindent_all
	local dev="$1"
	if [[ -e "/dev/mapper/$dev" ]]; then
		log "closing LUKS device $dev"
		cryptsetup close "$dev"
	fi
}


function maybe_truncate() {
	eval "$(lindent)"
	local dest="$1"
	local src="$2"
	local dest_size="$(get_size "$dest")"
	local src_size="$(get_size "$src")"
	if ! [[ -b "$dest" ]]; then
		log "truncating regular file $dest"
		if ! exists "$dest"; then
			ltrap "cleanup_remove_fail '$dest'"
		fi
		truncate --size 0 "$dest"
		truncate --size "$src_size" "$dest"
	elif (( dest_size < src_size )); then
		die "block device $dest is of size $dest_size < $src_size, aborting"
	fi
}

function maybe_loop() {
	eval "$(lindent)"
	declare -n dev="$1"
	if ! [[ -b "$dev" ]]; then
		local loop=$(losetup -Pf --show "$dev")
		ltrap "cleanup_detach '$loop'"
		log "$loop for $dev"
		dev="$loop"
	fi
}


#
# main
#

declare -A ARGS=(
	[--luks:]=ARG_LUKS
	[--]=DISKS
)
parse_args ARGS "$@" || usage "Invalid options"
(( ${#DISKS[@]} == 2 )) || usage "Expected 2 positional arguments, got ${#DISKS[@]}"
case "$ARG_LUKS" in
dd|recreate|clone) ;;
"") ARG_LUKS=dd ;;
*) usage "Invalid option: --luks=$ARG_LUKS (expected one of \"dd\" (or empty), \"recreate\" or \"clone\")" ;;
esac

SRC="${DISKS[0]}"
DEST="${DISKS[1]}"
SUCCESS=0

eval "$(globaltraps)"

if ! [[ -b "$SRC" || -f "$SRC" ]]; then
	die "Bad source: $SRC"
fi

if ! [[ -b "$DEST" || -f "$DEST" || ! -e "$DEST" ]]; then
	die "Bad destination: $DEST"
fi

SRC_REAL="$SRC"
DEST_REAL="$DEST"

log "Preparing to clone $SRC to $DEST"
maybe_truncate "$DEST" "$SRC"

log "Cloning partition table from $SRC to $DEST"
indent
SRC_PTTYPE="$(blkid -s PTTYPE -o value "$SRC")"
case "$SRC_PTTYPE" in
dos)
	log "MBR detected -- using sfdisk"
	sfdisk -d "$SRC" | sfdisk "$DEST"
	;;
gpt)
	log "GPT detected -- using sgdisk"
	sgdisk -R "$DEST" "$SRC"
	;;
*)
	die "unknown partition table type '$SRC_PTTYPE'!"
	;;
esac
unindent

log "Setting up loop devices"
maybe_loop SRC
maybe_loop DEST

log "Discovering partitions"
SRC_PART=( "$SRC"?(p)+([0-9]) )
DEST_PART=( "$DEST"?(p)+([0-9]) )
for p in "${SRC_PART[@]}"; do
	if ! [[ -b "$p" ]]; then
		die "Failed to discover partitions: $SRC: $p is not a block device"
	fi
done
for p in "${DEST_PART[@]}"; do
	if ! [[ -b "$p" ]]; then
		die "Failed to discover partitions: $DEST: $p is not a block device"
	fi
done
if [[ "${SRC_PART[*]##$SRC?(p)}" != "${DEST_PART[*]##$DEST?(p)}" ]]; then
	IFS=,
	die "Failed to copy partition table: partition tables do not match: src=${SRC}{${SRC_PART[*]##$SRC?(p)}}, dest=${DEST}{${DEST_PART[*]##$DEST?(p)}}"
fi

# FIXME LUKS2 format parameters are hardcoded
LUKS_FORMAT_CMD=(
	cryptsetup
	luksFormat
	--type luks2
	#--sector-size <autodetermined>
	--cipher aes-xts-plain64
	--key-size 256  # AES-XTS-256 is equivalent to AES-128
	--hash sha256
	--pbkdf argon2id
)
LUKS_OPEN_CMD=(
	cryptsetup
	luksOpen
	--allow-discards
)

function luks_open() {
	local part="$1"
	local name="${part##*/}"
	local uuid="$(blkid "$part" -o value -s UUID)"

	declare -n out="$2"
	out="/dev/mapper/$name"

	ltrap "cleanup_close '$name'"
	loud "When prompted, unlock LUKS volume $part (UUID $uuid) to be opened as $name"
	"${LUKS_OPEN_CMD[@]}" "$part" "$name"
}

function luks_create() {
	local part="$1"
	local name="${part##*/}"

	declare -n out="$2"
	out="/dev/mapper/$name"

	ltrap "cleanup_close '$name'"
	loud "When prompted, enter a passphrase for a new LUKS volume at $part to be opened as $name"
	"${LUKS_FORMAT_CMD[@]}" "$part"
	"${LUKS_OPEN_CMD[@]}" "$part" "$name"
}

function luks_clone() {
	eval "$(ltraps)"
	eval "$(lindent)"

	local src_part="$1" dest_part="$2"
	local src_dm dest_dm
	local src_uuid="$(blkid_src UUID)"

	if [[ "$ARG_LUKS" == "recreate" ]]; then
		luks_open "$src_part" src_dm
		luks_create "$dest_part" dest_dm

		# FIXME hardcode
		clone_partition "$src_dm" "$dest_dm"
	elif [[ "$ARG_LUKS" == "clone" ]]; then
		# `mktemp -u` is unsafe, but cryptsetup won't accept a backup file
		# that already exists.
		local header="$(mktemp -u)"
		ltrap "cleanup_remove '$header'"
		cryptsetup luksHeaderBackup "$src_part" --header-backup-file "$header"
		cryptsetup luksHeaderRestore "$dest_part" --header-backup-file "$header"
		lruntrap

		luks_open "$src_part" src_dm
		luks_open "$dest_part" dest_dm
	else
		die "Internal error: bad \$ARG_LUKS=$ARG_LUKS"
	fi

	# FIXME hardcode
	clone_partition "$src_dm" "$dest_dm"
}

# $1: src
# $2: dest
function clone_partition() {
	eval "$(lindent)"

	local src_part="$1" dest_part="$2"
	local part_type="$(blkid_src TYPE)"
	local log_msg="cloning '$src_part'"

	log "cloning '$src_part' to '$dest_part'"
	indent

	if [[ "$part_type" ]]; then
		log "type '$part_type'"
	fi

	if [[ "$part_type" ]] && command -v partclone.$part_type &>/dev/null; then
		log "using 'partclone.$part_type'"
		"partclone.$part_type" -b -s "$src_part" -O "$dest_part"
	elif [[ "$part_type" == "swap" ]]; then
		log "recreating swapspace label '$(blkid_src LABEL)' uuid '$(blkid_src UUID)'"
		mkswap \
			-L "$(blkid_src LABEL)" \
			-U "$(blkid_src UUID)" \
			"$dest_part"
	elif  [[ "$part_type" == "crypto_LUKS" && "$ARG_LUKS" != "dd" ]]; then
		log "entering LUKS container"
		luks_clone "$src_part" "$dest_part"
	else
		log "using partclone.dd"
		partclone.dd -s "$src_part" -O "$dest_part"
	fi
}

log "Cloning partitions"
for (( i = 0; i < ${#SRC_PART[@]}; ++i )); do
	src_part="${SRC_PART[i]}"
	dest_part="${DEST_PART[i]}"
	clone_partition "$src_part" "$dest_part"
done

SUCCESS=1
