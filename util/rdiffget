#!/bin/bash

. lib.sh || exit


#
# args and usage
#

_usage() {
	cat <<EOF
Usage: $0 [RDIFF-OPTIONS...] <SRC> <DEST>

Transfer <SRC> to the same directory as <DEST>, using <DEST> as a delta
basis.

Options:
  <SRC>, <DEST>		Local or remote (user@host:path) path to a file
  RDIFF-OPTIONS		Options accepted by rdiff
EOF
}


#
# functions
#

# $1: input
# $host, $path, $is_remote: output
parse_file_path() {
	declare -n parsed="$1"
	local uri="$2"
	if [[ $uri == *:* ]]; then
		parsed[host]="${uri%%:*}"
		parsed[path]="${uri#*:}"
	else
		unset parsed[host]
		parsed[path]="$uri"
	fi
	parsed[uri]="$uri"
}

# ltrap "vector"; accepts command in $@ and eval-escapes it
ltrapv() {
	ltrap "${*@Q}"
}

run_on() {
	declare -n arg="$1"
	shift

	if [[ ${arg[host]+set} ]]; then
		ssh "${arg[host]}" "${*@Q}"
	else
		"$@"
	fi
}

run_on_with_dir() {
	declare -n arg="$1"
	local dir="$2"
	shift 2

	if [[ ${arg[host]+set} ]]; then
		ssh "${arg[host]}" "cd ${dir@Q} && ${*@Q}"
	else
		( cd "$dir" && "$@" )
	fi

}

rm_on() {
	declare -n arg="$1"

	if [[ ${arg[host]+set} ]]; then
		log "Removing ${arg[host]}:$2"
	else
		log "Removing $2"
	fi
	run_on "$1" rm -rf "$2"
}

put_on() {
	declare -n arg="$1"
	local path="$2"
	local dir="$(dirname "$path")"
	shift 2

	if [[ ${arg[host]+set} ]]; then
		pv "$@" | ssh "${arg[host]}" "mkdir -p ${dir@Q} && cat >${path@Q}"
	else
		mkdir -p "$dir"
		pv "$@" >"$path"
	fi
}

get_signature() {
	declare -n from="$1"
	run_on "$1" rdiff signature "${RDIFF_ARGS[@]}" "${from[path]}"
}

put_signature() {
	put_on "$1" "$TEMPDIR/rdiff-signature" -N signature
}

get_delta() {
	declare -n from="$1"
	run_on "$1" rdiff delta "${RDIFF_ARGS[@]}" "$TEMPDIR/rdiff-signature" "${from[path]}"
}

put_delta() {
	put_on "$1" "$TEMPDIR/rdiff-delta" -N delta
}

apply_delta() {
	declare -n from="$1"
	declare -n to="$2"
	local from_basename to_dirname
	from_basename="$(basename "${from[path]}")"
	to_dirname="$(dirname "${to[path]}")"
	to[newpath]="$(joinpath "$to_dirname" "$from_basename")"

	run_on "$2" rdiff patch "${RDIFF_ARGS[@]}" "${to[path]}" "$TEMPDIR/rdiff-delta" "${to[newpath]}"
}

maybe_extract() {
	declare -n arg="$1"

	local extract=()
	local suffix

	case "${arg[path]}" in
	*.zst) suffix=.zst; extract=( zstd -d -f ) ;;
	*.gz)  suffix=.gz; extract=( gzip -d -k -f ) ;;
	*.bz2) suffix=.bz2; extract=( bzip2 -d -k -f ) ;;
	*.xz)  suffix=.xz; extract=( xz -d -k -f ) ;;
	esac
	if [[ ${extract+set} ]]; then
		log "Extracting ${arg[uri]} -> ${arg[path]%$suffix}"
		run_on "$1" "${extract[@]}" "${arg[path]}"
		ltrapv rm_on "$1" "${arg[path]%$suffix}"
		arg[path]="${arg[path]%$suffix}"
		arg[uri]="${arg[uri]%$suffix}"
	fi
}


#
# main
#

if ! (( $# >= 2 )); then
	usage "Not enough parameters (got $#, expected at least 2)"
fi

eval "$(globaltraps)"

CHECKSUM_CREATE=( sha1sum -b )
CHECKSUM_VERIFY=( sha1sum -c )

SRC_URI="${@: -2:1}"
DEST_URI="${@: -1:1}"
RDIFF_ARGS=( "${@:1:$#-2}" )

declare -A _host  # dummy
declare -A SRC
declare -A DEST
parse_file_path SRC "$SRC_URI"
parse_file_path DEST "$DEST_URI"

# This is completely unsafe, but we will use the same temporary directory path
# on all hosts we talk to
TEMPDIR="$(mktemp -d -p /tmp)"
if [[ ${DEST[host]+set} ]]; then ltrapv rm_on DEST "$TEMPDIR"; fi
if [[ ${SRC[host]+set} ]]; then ltrapv rm_on SRC "$TEMPDIR"; fi
ltrapv rm_on _host "$TEMPDIR"

maybe_extract SRC
maybe_extract DEST

log "Computing signature for ${DEST[uri]} -> ${SRC[host]-local machine}"
get_signature DEST | put_signature SRC
log "Computing delta from ${SRC[uri]} -> ${DEST[host]-local machine}"
get_delta SRC | put_delta DEST
log "Applying delta to ${DEST[uri]}"
apply_delta SRC DEST

log "Verifying checksum"
run_on_with_dir SRC "$(dirname "${SRC[path]}")" "${CHECKSUM_CREATE[@]}" "$(basename "${SRC[path]}")" \
| run_on_with_dir DEST "$(dirname "${DEST[path]}")" "${CHECKSUM_VERIFY[@]}" -
