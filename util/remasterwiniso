#!/bin/bash

. lib.sh || exit
shopt -s extglob

declare -A ARGS=(
	[--solid|--esd::]=ARG_COMPRESS_SOLID
	[--solid-all|--esd-all::]=ARG_COMPRESS_SOLID_FORCE
	[--compress|--wim::]=ARG_COMPRESS
	[--nocompress|--none]=ARG_COMPRESS_NONE
	[--replace|--overwrite]=ARG_REPLACE
	[--]=ARG_FILES
)
parse_args ARGS "$@"

COMPRESS=LZX:100
COMPRESS_SOLID=LZMS:100
if [[ ${ARG_COMPRESS_SOLID_FORCE+set} ]]; then
	[[ $ARG_COMPRESS_SOLID_FORCE == 1 ]] || COMPRESS_SOLID="$ARG_COMPRESS_SOLID_FORCE"
	EXTENSION=esd
	SKIP_WIMBOOT=1
elif [[ ${ARG_COMPRESS_SOLID+set} ]]; then
	[[ $ARG_COMPRESS_SOLID_FORCE == 1 ]] || COMPRESS_SOLID="$ARG_COMPRESS_SOLID"
	EXTENSION=esd
elif [[ ${ARG_COMPRESS+set} ]]; then
	[[ $ARG_COMPRESS == 1 ]] || COMPRESS="$ARG_COMPRESS"
	EXTENSION=wim
elif [[ ${ARG_COMPRESS_NONE+set} ]]; then
	COMPRESS=none
	EXTENSION=wim
else
	COMPRESS=LZX:100
	EXTENSION=wim
fi

WIMOPTIMIZE_ARGS_WIM=(
	--check
	--recompress
	--compress "$COMPRESS"
	# we have to specify non-solid chunk because wimoptimize inherits it otherwise, breaking ESD->WIM conversion
	# (Microsoft tooling chokes on LZX/128K)
	--chunk-size 32K
)
# HACK: if --compress=none, wimlib does not recognize a --chunk-size, so drop it
if [[ $COMPRESS == none ]]; then
	unset WIMOPTIMIZE_ARGS_WIM[-1]
	unset WIMOPTIMIZE_ARGS_WIM[-1]
fi

WIMOPTIMIZE_ARGS_ESD=(
	--check
	--recompress
	--solid
	--solid-compress "$COMPRESS_SOLID"
	--solid-chunk-size 64M
	# we have to specify non-solid algo/chunk because wimoptimize inherits them otherwise, yielding counterintuitive results
	# (producing ESD files that report LZX/32K compression)
	--compress "$COMPRESS_SOLID"
	--chunk-size 128K
)

if [[ $EXTENSION == esd ]]; then
	log "Applying solid compression (ESD) with $COMPRESS_SOLID"
	WIMOPTIMIZE_ARGS=( "${WIMOPTIMIZE_ARGS_ESD[@]}" )
elif [[ $EXTENSION == wim ]]; then
	if [[ $COMPRESS != none ]]; then
		log "Applying editable compression (WIM) with $COMPRESS"
	else
		log "Applying editable format (WIM) without compression"
	fi
	WIMOPTIMIZE_ARGS=( "${WIMOPTIMIZE_ARGS_WIM[@]}" )
fi

if ! (( ${#ARG_FILES[@]} )); then
	log "No files provided -- assuming current directory ($(realpath --strip .))"
	ARG_FILES=(.)
fi

process_image() {
	log "Recompressing single file: $1"

	local file="$1" stem="${1%.*}" args ext
	if [[ ! $SKIP_WIMBOOT && $1 == boot.* ]]; then
		args=( "${WIMOPTIMIZE_ARGS_WIM[@]}" )
		ext="wim"
	else
		args=( "${WIMOPTIMIZE_ARGS[@]}" )
		ext="$EXTENSION"
	fi

	wimoptimize "${args[@]}" "$file"
	if [[ "$1" != "$stem.$ext" ]]; then
		mv -v "$file" "$stem.$ext"
	fi
}

process_dir() {
	log "Recompressing directory: $1"

	if [[ $SKIP_WIMBOOT ]]; then
		# skip special handling of boot.{esd,wim}
		find "$1" -type f \( -name '*.wim' -or -name '*.esd' \) \
			| parallel --tty "wimoptimize ${WIMOPTIMIZE_ARGS[@]@Q} {} && if [[ {} != {.}.$EXTENSION ]]; then mv -v {} {.}.$EXTENSION; fi"
		return
	fi

	# force editable (WIM) compression for boot.{esd,wim}
	find "$1" -type f \( -name '*.wim' -or -name '*.esd' \) -name 'boot.*' \
		| parallel --tty "wimoptimize ${WIMOPTIMIZE_ARGS_WIM[@]@Q} {} && if [[ {} != {.}.wim ]]; then mv -v {} {.}.wim; fi"

	find "$1" -type f \( -name '*.wim' -or -name '*.esd' \) -not -name 'boot.*' \
		| parallel --tty "wimoptimize ${WIMOPTIMIZE_ARGS[@]@Q} {} && if [[ {} != {.}.$EXTENSION ]]; then mv -v {} {.}.$EXTENSION; fi"
}

process_iso() {
	eval "$(ltraps)"

	local out
	if [[ $ARG_REPLACE ]]; then
		out="$1"
	elif [[ $COMPRESS != none ]]; then
		out="${1%%?(.orig).iso}.$EXTENSION.iso"
	else
		out="${1%%?(.orig).iso}.none.iso"
	fi

	log "Remastering ISO file: $1 -> $out"

	local label
	label="$(isoinfo -j UTF-8 -d -i "$1" | sed -nr 's/^Volume (set )?id: (.+)$/\2/p' | head -n1)" || return

	work_dir="$(mktemp -d)" || return
	ltrap "rm -rf '$work_dir'"

	7zz x -o"$work_dir" "$1" || return
	process_dir "$work_dir" || return

	local out_tmp="$(dn_slash "$out").$(bn "$out").XXXXXXXXXX.tmp"
	out_tmp="$(mktemp -u "$out_tmp")" || return
	ltrap "rm -f '$out_tmp'"

	mkwiniso "$work_dir" "$out_tmp" "$label" || return
	mv -fT "$out_tmp" "$out" || return
	luntrap
}

errs=0
for file in "${ARG_FILES[@]}"; do
	if [[ -d "$file" ]]; then
		if ! process_dir "$file"; then
			err "Failed to process directory: $file"
			(( ++errs ))
		fi
	elif [[ "${file,,}" == *.iso ]]; then
		if ! process_iso "$file"; then
			err "Failed to process ISO file: $file"
			(( ++errs ))
		fi
	elif [[ "${file,,}" == *.wim || "${file,,}" == *.esd ]]; then
		if ! process_image "$file"; then
			err "Failed to process WIM file: $file"
			(( ++errs ))
		fi
	else
		err "Unknown item: $file"
		(( ++errs ))
	fi
done

if (( errs )); then
	err "Total $errs errors"
	exit 1
fi
exit 0


