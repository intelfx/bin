#!/bin/bash

set -eo pipefail
shopt -s lastpipe

. lib.sh

_usage() {
	cat <<EOF
Usage: $0 TARGET-SUBVOL NEW-SUBVOL
Moves NEW-SUBVOL to TARGET-SUBVOL, preserving all children of TARGET-SUBVOL
in place. Moves TARGET-SUBVOL to NEW-SUBVOL.
EOF
}

if (( $# == 2 )); then
	ARG_TARGET="$1"
	ARG_SOURCE="$2"
else
	usage "Expected 2 arguments, got $#"
fi

if ! [[ -d "$ARG_TARGET" ]]; then
	die "Invalid target: $ARG_TARGET"
fi
if ! [[ -d "$ARG_SOURCE" ]]; then
	die "Invalid source: $ARG_SOURCE"
fi

# FIXME: check that target and source do, in fact, belong to the same filesystem
# AND the same mounted tree (the latter is a btrfs limitation)

SRC="$(realpath -qe "$ARG_SOURCE")"
DEST="$(realpath -qe "$ARG_TARGET")"


btrfs-sub-find "$SRC" | sort | readarray -t SRC_SUBVOLS
btrfs-sub-find "$DEST" | sort | readarray -t DEST_SUBVOLS

check_subvol_list() {
	declare -n subvols="$1"
	local root="$2"

	if [[ "${subvols[0]}" != "$root" ]]; then
		die "$root is not a subvol"
	fi
	unset subvols[0]
}
check_subvol_list SRC_SUBVOLS "$SRC"
check_subvol_list DEST_SUBVOLS "$DEST"

for dest_p in "${DEST_SUBVOLS[@]}"; do
	src_p="$SRC/${dest_p#$DEST/}"
	if [[ -e "$src_p" && ! ( -d "$src_p" && ! -s "$src_p" ) ]]; then
		die "Cannot move child subvol $dest_p: $src_p exists and is not an empty directory"
	fi
done

last_p=""
for dest_p in "${DEST_SUBVOLS[@]}"; do
	if [[ "$last_p" && "$dest_p" == "$last_p"/* ]]; then
		log "Skipping $dest_p: under already-moved $last_p"
		continue
	fi
	src_p="$SRC/${dest_p#$DEST/}"
	last_p="$dest_p"

	if [[ -e "$src_p" && -d "$src_p" && ! -s "$src_p" ]]; then
		trace rm -df "$src_p"
	elif [[ -e "$src_p" ]]; then
		die "Logic error"
	fi

	trace mv -T "$dest_p" "$src_p"
done

read

btrfs-sub-find "$DEST" | sort | readarray -t DEST_SUBVOLS
check_subvol_list DEST_SUBVOLS "$DEST"
if (( ${#DEST_SUBVOLS[@]} )); then
	err "Internal error: ${#DEST_SUBVOLS[@]} child subvolumes remaining under $DEST, cannot swap"
	printf "* %s\n" "${DEST_SUBVOLS[@]}" >&2
	exit 1
fi

if whence renameat2 &>/dev/null; then
	trace renameat2 -e "$SRC" "$DEST"
else
	trace mv -T "$DEST" "$DEST.old"
	trace mv -T "$SRC" "$DEST" || { mv -T "$DEST.old" "$DEST"; exit 1; }
	trace mv -T "$DEST.old" "$SRC" || { mv -T "$DEST" "$SRC"; mv -T "$DEST.old" "$DEST"; exit 1; }
fi
