#!/bin/bash

set -eo pipefail
shopt -s lastpipe

set_trace() {
	if (( DEBUG )); then
		set -x
	fi
}

trace() {
	if (( DEBUG )); then
		local rc=0
		set -x
		"$@"
		{ rc=$?; set +x; } &>/dev/null
		return $rc
	else
		"$@"
	fi
}

dbg() {
	if (( DEBUG )); then
		echo >&2 "DBG: $*"
	fi
}

warn() {
	echo >&2 "W: $*"
}

err() {
	echo >&2 "E: $*"
}

die() {
	err "$@"
	exit 1
}

usage() {
	if (( $# )); then err "$@"; fi
	_usage
	exit 1
}

help() {
	_usage
	exit 0
}

_usage() {
	cat <<EOF
Usage: $0 [--debug] [--tty|--desktop|--both] [MODE [FILE]]

Copy or paste data to/from any available clipboard.

Arguments:
	FILE
		Path to the file that shall be read/written to/from clipboard.
		If not set, standard streams (stdin or stdout) are used.

	MODE
		i, -i, -c, --copy	Read stdin or file into clipboard
		o, -o, -p, --paste	Write to stdin or file from clipboard

		If no mode is given (in which case the file argument cannot be
		used), the direction is determined by the standard stream which
		is _not_ the terminal.

		If both standard streams are connected to the terminal,
		a warning is printed and \`--paste\` is assumed.

Options:
	-t, --tty	Limit operation to terminal clipboard (tmux or OSC 52)
	-d, --desktop	Limit operation to graphical clipboard (Wayland or X11)
	-b, --both	Attempt to work with terminal and graphical clipboards
			in turn	(this option only makes sense with -c/--copy)

	--debug		Trace execution
EOF
}


#
# args
#

unset op
unset file
unset mode_both
unset mode_tty
unset mode_desktop

while (( $# )); do
	case "$1" in
	--debug) export DEBUG=1 ;;
	-b|--both) mode_both=1 ;;
	-t|--tty) mode_tty=1 ;;
	-d|--desktop) mode_desktop=1 ;;
	-i|-c|--copy) op=copy ;;
	-o|-p|--paste) op=paste ;;
	-*) usage "invalid flag: ${1@Q}" ;;
	*) break ;;
	esac
	shift
done

if (( $# )) && [[ ! ${op+set} ]]; then
	case "$1" in
	i) op=copy ;;
	o) op=paste ;;
	*) usage "invalid flag: ${1@Q}" ;;
	esac
	shift
fi

if (( $# )); then
	file="$1"
	shift
fi

if (( $# )); then
	usage "unexpected positional arguments"
fi

if [[ ! ${file+set} && ! ${op+set} ]]; then
	if [[ -t 0 && ! -t 1 ]]; then op=paste
	elif [[ ! -t 0 && -t 1 ]]; then op=copy
	elif [[ -t 0 && -t 1 ]]; then op=paste; warn "no mode provided, assuming \`--paste\`"
	else die "could not infer mode (use -i/-c/--copy or -o/-p/--paste)"
	fi
fi

if [[ ${mode_both+set} && $op != copy ]]; then
	die "-b/--both does not make sense for pasting"
fi

if (( mode_both + mode_tty + mode_desktop == 0 )); then
	mode_tty=1
	mode_desktop=1
fi


#
# helper functions
#

unset tmpfile

into_file() {
	# if input is stdin or not a regular file, copy data via cat(1)
	# NOTE: also handles the stdin case (unset $file fails `-f`)
	if [[ ! -f ${file} ]]; then
		# at most one tmpfile
		[[ ! ${tmpfile+set} ]] || die "internal error"
		trap 'trace rm -f -- "$tmpfile"' EXIT
		tmpfile="$(trace mktemp --tmpdir=/dev/shm clip.XXXXXX)"

		# NOTE: also handles the stdin case (unset $file expands to no words)
		cat "${file[@]}" >"$tmpfile"
		file="$tmpfile"
	fi
}


#
# possible methods
#

run_wl_clipboard() {
	if [[ ${file+set} ]]; then
		case "$op" in
		copy) exec <"$file" ;;
		paste) exec >"$file" ;;
		*) die "internal error" ;;
		esac
	fi
	case "$op" in
	copy) set_trace; exec wl-copy ;;
	paste) set_trace; exec wl-paste ;;
	*) die "internal error" ;;
	esac
}

run_xclip() {
	local args=()
	case "$op" in
	copy) args+=( -in ) ;;
	paste) args+=( -out ) ;;
	*) die "internal error" ;;
	esac
	if [[ ${file+set} ]]; then
		args+=( "$file" )
	fi
	set_trace
	exec xclip -selection clipboard "${args[@]}"
}

run_xsel() {
	local args=()
	case "$op" in
	copy) args+=( --input ) ;;
	paste) args+=( --output ) ;;
	*) die "internal error" ;;
	esac
	if [[ ${file+set} ]]; then
		case "$op" in
		copy) exec <"$file" ;;
		paste) exec >"$file" ;;
		*) die "internal error" ;;
		esac
	fi
	set_trace
	exec xsel --clipboard "${args[@]}"
}

run_tmux() {
	local args=()
	if [[ ${file+set} ]]; then
		case "$op" in
		copy) args+=( "$file" ) ;;
		paste) exec >"$file" ;;
		esac
	else
		case "$op" in
		copy) args+=( - ) ;;
		esac
	fi
	case "$op" in
	copy) set_trace; exec tmux load-buffer -w "${args[@]}" ;;
	paste) set_trace; exec tmux show-buffer "${args[@]}" ;;
	esac
}

run_osc52() {
	into_file

	local len max=74994
	wc -c "$file" | read -r len _

	if (( len > max )); then
		err "osc52: input is $(( len - max )) bytes too long (input=$len, max=$max)"
		return 1
	fi

	local enc
	enc="$(base64 -w0 -- "$file")"

	local esc_open='\033]52;c;' esc_close='\a'
	# FIXME: when is this needed?
	if [[ ${TMUX+set} && ${TERM} == screen* ]]; then
		dbg "osc52: applying tmux wrapping"
		esc_open="\033Ptmux;\033${esc_open}"
		esc_close="${esc_close}\033\\"
	fi

	dbg "osc52: $len raw bytes, ${#enc} encoded bytes"
	printf "${esc_open}%s${esc_close}" "$enc"
	exit
}

run_desktop() {
	if [[ ${WAYLAND_DISPLAY+set} ]] && command -v wl-copy wl-paste &>/dev/null; then
		run_wl_clipboard ||:
	fi

	if [[ ${DISPLAY+set} ]] && command -v xclip &>/dev/null; then
		run_xclip ||:
	fi

	if [[ ${DISPLAY+set} ]] && command -v xsel &>/dev/null; then
		run_xsel ||:
	fi

	return 1
}

run_tty() {
	if [[ ${TMUX+set} ]] && command -v tmux &>/dev/null; then
		run_tmux ||:
	fi

	if [[ -t 1 ]]; then
		run_osc52 ||:
	fi

	return 1
}


#
# main
#

fail=1

if [[ ${mode_both+set} ]]; then
	into_file
	( run_tty ) && fail=0 ||:
	( run_desktop ) && fail=0 ||:
fi

if [[ ${mode_desktop+set} ]]; then
	run_desktop ||:
fi

if [[ ${mode_tty+set} ]]; then
	run_tty ||:
fi

if (( fail )); then
	die "no clipboard interface detected"
fi
