#!/bin/bash

set -eo pipefail
shopt -s lastpipe

set_trace() {
	if (( DEBUG )); then
		set -x
	fi
}

warn() {
	echo >&2 "W: $*"
}

err() {
	echo >&2 "E: $*"
}

die() {
	err "$@"
	exit 1
}

usage() {
	if (( $# )); then err "$@"; fi
	_usage
	exit 1
}

help() {
	_usage
	exit 0
}

_usage() {
	cat <<EOF
Usage: $0 [--debug] [MODE [FILE]]

Copy or paste data to/from any available clipboard.

Arguments:
	FILE
		Path to the file that shall be read/written to/from clipboard.
		If not set, standard streams (stdin or stdout) are used.

	MODE
		i, -i, -c, --copy	Read stdin or file into clipboard
		o, -o, -p, --paste	Write to stdin or file from clipboard

		If no mode is given (in which case the file argument cannot be
		used), the direction is determined by the standard stream which
		is _not_ the terminal.

		If both standard streams are connected to the terminal,
		a warning is printed and \`--paste\` is assumed.

Options:
	--debug		Trace execution
EOF
}


#
# args
#

unset op
unset file

while (( $# )); do
	case "$1" in
	--debug) export DEBUG=1 ;;
	-i|-c|--copy) op=copy ;;
	-o|-p|--paste) op=paste ;;
	-*) usage "invalid flag: ${1@Q}" ;;
	*) break ;;
	esac
	shift
done

if (( $# )) && [[ ! ${op+set} ]]; then
	case "$1" in
	i) op=copy ;;
	o) op=paste ;;
	*) usage "invalid flag: ${1@Q}" ;;
	esac
	shift
fi

if (( $# )); then
	file="$1"
	shift
fi

if (( $# )); then
	usage "unexpected positional arguments"
fi

if [[ ! ${file+set} && ! ${op+set} ]]; then
	if [[ -t 0 && ! -t 1 ]]; then op=paste
	elif [[ ! -t 0 && -t 1 ]]; then op=copy
	elif [[ -t 0 && -t 1 ]]; then op=paste; warn "no mode provided, assuming \`--paste\`"
	else die "could not infer mode (use -i/-c/--copy or -o/-p/--paste)"
	fi
fi


#
# possible methods
#

run_wl_clipboard() {
	if [[ ${file+set} ]]; then
		case "$op" in
		copy) exec <"$file" ;;
		paste) exec >"$file" ;;
		*) die "internal error" ;;
		esac
	fi
	case "$op" in
	copy) set_trace; exec wl-copy ;;
	paste) set_trace; exec wl-paste ;;
	*) die "internal error" ;;
	esac
}

run_xclip() {
	local args=()
	case "$op" in
	copy) args+=( -in ) ;;
	paste) args+=( -out ) ;;
	*) die "internal error" ;;
	esac
	if [[ ${file+set} ]]; then
		args+=( "$file" )
	fi
	set_trace
	exec xclip -selection clipboard "${args[@]}"
}

run_xsel() {
	local args=()
	case "$op" in
	copy) args+=( --input ) ;;
	paste) args+=( --output ) ;;
	*) die "internal error" ;;
	esac
	if [[ ${file+set} ]]; then
		case "$op" in
		copy) exec <"$file" ;;
		paste) exec >"$file" ;;
		*) die "internal error" ;;
		esac
	fi
	set_trace
	exec xsel --clipboard "${args[@]}"
}

run_tmux() {
	local args=()
	if [[ ${file+set} ]]; then
		case "$op" in
		copy) args+=( "$file" ) ;;
		paste) exec >"$file" ;;
		esac
	else
		case "$op" in
		copy) args+=( - ) ;;
		esac
	fi
	case "$op" in
	copy) set_trace; exec tmux load-buffer -w "${args[@]}" ;;
	paste) set_trace; exec tmux show-buffer "${args[@]}" ;;
	esac
}


#
# main
#

if [[ ${WAYLAND_DISPLAY+set} ]] && command -v wl-copy wl-paste &>/dev/null; then
	run_wl_clipboard
fi

if [[ ${DISPLAY+set} ]] && command -v xclip &>/dev/null; then
	run_xclip
fi

if [[ ${DISPLAY+set} ]] && command -v xsel &>/dev/null; then
	run_xsel
fi

if [[ ${TMUX+set} ]] && command -v tmux &>/dev/null; then
	run_tmux
fi

die "no clipboard interface detected"
