#!/bin/bash

# Check whether a per-session tmux is running for session $1
# (implemented as a predefined root session name under a predefined custom socket).
function check_session() {
	"${tmux[@]}" -L "session-$1" list-sessions -F "#S" 2>/dev/null | grep -q --line-regexp --fixed-strings "$base_session-$1"
}

tmux=( "tmux" )

# Use our username to name tmux sessions.
# NB: actually, "base session" is a named "session group" which can contain 1
#     or more sessions which share windows and suchlike. Throughout this script,
#     "master session" means "first session in the group" and "slave session"
#     means any other session in this group.
#     The first session in a group is created automatically and is given a
#     suffix of "-0" appended to the session group name.
base_session="$USER"

# If there is a per-xdg-session tmux for current xdg session, use it.
if [[ "$XDG_SESSION_ID" ]] && check_session "$XDG_SESSION_ID"; then
	tmux+=( "-L" "session-$XDG_SESSION_ID" )
	base_session+="-$XDG_SESSION_ID"
fi

# Use our PID to name the slave session.
new_session="$base_session-$$"

#
# The tmx script aims to be transparent. Hence, we want to copy the current
# working directory, command and environment to the user-facing shell.
#
# Furthermore, if a user creates a new pane, we want the client environment
# to be carried there as well, depending on which client created the pane.
# Thankfully, semantics of sessions in tmux align with our goals: each session
# has an environment which is copied to every pane created in this session.
# The environment of the session group does not matter.
# On the other hand, cwd and command are honoured at window/pane level, which
# is, again, exactly what we need.

# Due to environment copying concerns, we always need to create a fresh window
# to get the correct environment to the user-facing shell.
NEW_WINDOW_COMMAND=( "new-window" "-c" "$(pwd)" "$@" ";" )

# When a session is created, it is already created with a single window in it.
# It is impossible to create a window-less session or session group in tmux.
# Hence, if this is the first window being created, we kill the "default" window.
if "${tmux[@]}" list-windows -t "$base_session-0" -F "#{window_id}" | grep -q --line-regexp --fixed-strings '@0'; then
	NEW_WINDOW_COMMAND+=( "kill-window" "-t" "@0" ";" )
fi

# Now build the command line to actually copy the environment to the target session.
while IFS='=' read -d $'\0' -r name value; do
	if [[ $name == TERM ]]; then
		name="ORIG_TERM"
	fi
	ENVIRONMENT_COMMAND+=( "set-environment" "-t" "$new_session" "$name" "$value" ";" )
done < <(env -0)

# This path is inherited by all new windows of this session (except the one
# expressly crated, see above).
cd "$HOME"

if ! "${tmux[@]}" has-session -t "$base_session-0"; then
	# create a session group if the master session is absent
	if [[ "$(systemctl --user show tmux.service -p LoadState)" == "LoadState=loaded" ]]; then
		# attempt to start tmux via existing systemd unit, if possible
		systemctl --user restart tmux
	else
		# otherwise launch it directly using systemd-run
		systemd-run --user --service-type=forking -p KillMode=control-group tmux new-session -t "$base_session" -d
	fi
fi

# Create a new session (without attaching it) and link to base session to share windows
# Attach to the new session & kill it once orphaned
# NOTE: instead of doing everything in one tmux call, only leave as little
#       as possible in the final command to avoid leaking them into the /proc/$$/cmdline
#exec "${tmux[@]}" \
#	new-session -d -t "$base_session" -s "$new_session" \; \
#	"${ENVIRONMENT_COMMAND[@]}" \
#	attach-session -t "$new_session" \; \
#	"${NEW_WINDOW_COMMAND[@]}" \
#	set-option destroy-unattached

# HACK: we can set $TMX_USE_EXISTING_WINDOW on PAM session leader level (e. g. getty)
#       to avoid creating a new window. This is used by the autologin getty on anystation
#       to show the bench/stress dashboard on boot.
if [[ ${TMX_USE_EXISTING_WINDOW+set} ]]; then
	# do not leak the variable into any nested sessions and tmx instances the user might run
	unset TMX_USE_EXISTING_WINDOW

	"${tmux[@]}" \
		new-session -d -t "$base_session" -s "$new_session" \; \
		"${ENVIRONMENT_COMMAND[@]}" \

	exec "${tmux[@]}" \
		attach-session -t "$new_session" \; \
		set-option destroy-unattached
fi

"${tmux[@]}" \
	new-session -d -t "$base_session" -s "$new_session" \; \
	"${ENVIRONMENT_COMMAND[@]}" \
	"${NEW_WINDOW_COMMAND[@]}" \

exec "${tmux[@]}" \
	attach-session -t "$new_session" \; \
	set-option destroy-unattached
