#!/bin/bash

. lib.sh || exit

_usage() {
  cat <<EOF
Usage: $0 [-n|--dry-run] [-f|--fs|--filesystem|--filesystems] [-F|-free-space] <block device...>
EOF
}

run() {
	if (( ARG_DRY_RUN || ARG_VERBOSE )); then
		echo "+ $*" >&2
	fi
	if ! (( ARG_DRY_RUN )); then
		eval "$*"
	fi
}

declare -A ARGS=(
	[-f|--fs|--filesystem|--filesystems]=ARG_TRIM_FILESYSTEMS
	[-F|--free-space]=ARG_TRIM_FREE_SPACE
	[-n|--dry-run]=ARG_DRY_RUN
	[-v|--verbose]=ARG_VERBOSE
	[--]=DISKS
)
parse_args ARGS "$@" || usage "Invalid options"
(( ${#DISKS[@]} )) || usage "At least one disk is required"
(( ARG_TRIM_FREE_SPACE || ARG_TRIM_FILESYSTEM )) || usage "At least one of -f/--filesystems and -F/--free-space is required"

eval "$(globaltraps)"

work_dir="$(mktemp -d)"
ltrap "rm -d '$work_dir'"

errs=0
for disk in "${DISKS[@]}"; do
	[[ -f "$disk" || -b "$disk" ]] || die "Invalid disk: $disk, expected a file or a block device"

	if ! [[ -b "$disk" ]]; then
		loop="$(losetup -Pf --show "$disk")"
		ltrap "losetup -d '$loop'"
		log "$disk: configured a loopback device at $loop"
		disk_true="$disk"; disk="$loop"
	fi

	pttype="$(blkid -o value -s PTTYPE "$disk")"
	fstype="$(blkid -o value -s TYPE "$disk")"

	if [[ "$pttype" ]]; then
		find "$disk"p[0-9]* | readarray -t partitions
		log "$disk: whole disk detected ($pttype), discovered ${#partitions[@]} partitions"
	elif [[ "$fstype" ]]; then
		partitions=( "$disk" )
		log "$disk: filesystem detected ($fstype), treating as a partition"
	else
		err "$disk: could not find a partition table or a filesystem signature, skipping"
		(( ++errs ))
		continue
	fi

	if (( ARG_TRIM_FILESYSTEMS )); then
		log "$disk: trimming free space on ${#partitions[@]} filesystems"
		for part in "${partitions[@]}"; do
			fstype="$(blkid -o value -s TYPE "$part")"
			if ! [[ "$fstype" ]]; then
				warn "$part: could not find a filesystem signature, skipping"
				continue
			fi

			mount_dir="$work_dir/${part##*/}"
			mkdir -p "$mount_dir"
			ltrap "rm -d '$mount_dir'"
			ltrap "umount -l '$mount_dir'"

			if ! run mount "$part" "$mount_dir" -o discard; then
				luntrap
				err "$part: could not mount at $mount_dir, skipping"
				(( ++errs ))
				continue
			fi
			if ! run fstrim -v "$mount_dir"; then
				err "$part: could not run fstrim at $mount_dir"
				(( ++errs ))
			fi
			sync
			if ! { run umount "$mount_dir" || run umount -l "$mount_dir"; }; then
				luntrap
				err "$part: could not umount $mount_dir, exiting"
				exit 1
			fi; luntrap
			rm -d "$mount_dir"; luntrap
		done
		sync
	fi

	if (( ARG_TRIM_FREE_SPACE )); then
		log "$disk: trimming unallocated free space"
		cmds=()
		free=0
		parted -m "$disk" unit b print free | grep -E ':free;$' | while IFS=: read -ra FREE; do
			cmds+=( "blkdiscard --force --offset '${FREE[1]%%B}' --length '${FREE[3]%%B}' '$disk'" )
			(( free += ${FREE[3]%%B} ))
		done

		for c in "${cmds[@]}"; do
			if ! run "$c"; then
				err "$part: could not run blkdiscard, skipping"
				(( ++errs ))
				continue 2
			fi
		done
		sync
		log "$disk: trimmed $(bscalc -H "$free")"
	fi
done
